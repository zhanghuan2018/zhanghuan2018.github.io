[{"title":"wamp配置","url":"/2018/12/12/wamp配置/","content":"\n##  安装\n下载wamp包并安装\n\n## 配置\n\n### 配置host C:\\Windows\\System32\\drivers\\etc\n```\n127.0.0.1 www.test.com\n```\n### 找到Apache服务器下的 httpd.conf\n```\n# Virtual hosts\n# Include conf/extra/httpd-vhosts.conf\n```\n去掉注释\n\n### 配置虚拟域名\n```\n<VirtualHost *:80>\n    ServerAdmin webmaster@www.test.com\n    DocumentRoot \"D:\\Bitnami\\wampstack-7.1.24-0\\apache2\\htdocs\\work\\InMiBao\\public\"\n    ServerName www.test.com\n    ErrorLog \"logs/www.test.com-error.log\"\n    CustomLog \"logs/www.test.com-access.log\" common\n</VirtualHost>\n```\n* ServerAdmin 　　  这个是管理员邮箱\n* DocumentRoot 　  这个是域名进入的根目录\n* ServerName 　　　 这个是虚拟主机的域名（名称随便）\n* Errorlog 　　　　　这个是错误日志，后面是日志的存放地址\n* CustomLog　　　　这个是虚拟主机访问的日志。\n\n### thinkphp5去除index.php\n```\n[ Apache ]\nhttpd.conf配置文件中加载了mod_rewrite.so模块\n所有 AllowOverride None 将None改为 All\n把下面的内容保存为.htaccess文件放到应用入口文件的同级目录下\n<IfModule mod_rewrite.c>\n  Options +FollowSymlinks -Multiviews\n  RewriteEngine On\n\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]\n</IfModule>\n```\n重启Apache服务器\n","tags":["windows","wamp","php","mysql","apache"]},{"title":"程序小片段Snippets","url":"/2018/12/12/程序小片段Snippets/","content":"## 简介\nSnippets是可以在Chrome DevTools的“源”面板中创建和执行的小脚本。 您可以从任何页面访问和运行它们。 当您运行代码段时,它会从当前打开的页面的上下文执行。\n\n### 入口\nChrome开发者工具-Sources面板-Snippets面板\n<center>\n<img src=\"/post_img/20181212/20181212-01.png\" width=\"90%\" />\n</center>\n\n### 显示边框\n显示所有元素的边框，看页面布局非常方便\n```js\n[].forEach.call($$(\"*\"),function(a){\n  a.style.outline=\"1px solid #\"+(~~(Math.random()*(1<<24))).toString(16)\n});\n```\n<center>\n<img src=\"/post_img/20181212/20181212-02.png\" width=\"90%\" />\n</center>\n\n### allcolors.js\n从页面上的元素中使用的计算样式打印所有颜色。 使用样式化的console.log调用来可视化每种颜色。\n```js\n// allcolors.js\n// https://github.com/bgrins/devtools-snippets\n// Print out CSS colors used in elements on the page.\n\n(function () {\n  // Should include colors from elements that have a border color but have a zero width?\n  var includeBorderColorsWithZeroWidth = false;\n\n  var allColors = {};\n  var props = [\"background-color\", \"color\", \"border-top-color\", \"border-right-color\", \"border-bottom-color\", \"border-left-color\"];\n  var skipColors = {\n    \"rgb(0, 0, 0)\": 1,\n    \"rgba(0, 0, 0, 0)\": 1,\n    \"rgb(255, 255, 255)\": 1\n  };\n\n  [].forEach.call(document.querySelectorAll(\"*\"), function (node) {\n    var nodeColors = {};\n    props.forEach(function (prop) {\n      var color = window.getComputedStyle(node, null).getPropertyValue(prop),\n      thisIsABorderProperty = (prop.indexOf(\"border\") != -1),\n      notBorderZero = thisIsABorderProperty ? window.getComputedStyle(node, null).getPropertyValue(prop.replace(\"color\", \"width\")) !== \"0px\" : true,\n      colorConditionsMet;\n\n      if (includeBorderColorsWithZeroWidth) {\n        colorConditionsMet = color && !skipColors[color];\n      } else {\n        colorConditionsMet = color && !skipColors[color] && notBorderZero;\n      }\n\n      if (colorConditionsMet) {\n        if (!allColors[color]) {\n          allColors[color] = {\n            count: 0,\n            nodes: []\n          };\n        }\n\n        if (!nodeColors[color]) {\n          allColors[color].count++;\n          allColors[color].nodes.push(node);\n        }\n\n        nodeColors[color] = true;\n      }\n    });\n  });\n\n  function rgbTextToRgbArray(rgbText) {\n    return rgbText.replace(/\\s/g, \"\").match(/\\d+,\\d+,\\d+/)[0].split(\",\").map(function(num) {\n      return parseInt(num, 10);\n    });\n  }\n\n  function componentToHex(c) {\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n  }\n\n  function rgbToHex(rgbArray) {\n    var r = rgbArray[0],\n    g = rgbArray[1],\n    b = rgbArray[2];\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  }\n\n  var allColorsSorted = [];\n  for (var i in allColors) {\n    var rgbArray = rgbTextToRgbArray(i);\n    var hexValue = rgbToHex(rgbArray);\n\n    allColorsSorted.push({\n      key: i,\n      value: allColors[i],\n      hexValue: hexValue\n    });\n  }\n\n  allColorsSorted = allColorsSorted.sort(function (a, b) {\n    return b.value.count - a.value.count;\n  });\n\n  var nameStyle = \"font-weight:normal;\";\n  var countStyle = \"font-weight:bold;\";\n  function colorStyle(color) {\n    return \"background:\" + color + \";color:\" + color + \";border:1px solid #333;\";\n  };\n\n  console.group(\"Total colors used in elements on the page: \" + window.location.href + \" are \" + allColorsSorted.length);\n  allColorsSorted.forEach(function (c) {\n    console.groupCollapsed(\"%c    %c \" + c.key + \" \" + c.hexValue + \" %c(\" + c.value.count + \" times)\",\n    colorStyle(c.key), nameStyle, countStyle);\n    c.value.nodes.forEach(function (node) {\n      console.log(node);\n    });\n    console.groupEnd();\n  });\n  console.groupEnd(\"All colors used in elements on the page\");\n\n})();\n```\n\n### 查看加载的link和script\n```js\n//Cache Buster\n(function (){\n  var rep = /.*\\?.*/,\n  links = document.getElementsByTagName('link'),\n  scripts = document.getElementsByTagName('script');\n  console.log('link----------------');\n  for (var i=0;i<links.length;i++){\n    var link = links[i],\n    href = link.href;\n    if(rep.test(href)){\n      link.href = href+'&'+Date.now();\n    }else{\n      link.href = href+'?'+Date.now();\n    }\n    console.log(link.href);\n  }\n  console.log('script----------------');\n  for (var i=0;i<scripts.length;i++){\n    var script = scripts[i],\n    src = script.src;\n    console.log(src);\n  }\n})();\n```\n\n### console-save.js\n从控制台将对象保存为.json文件的简单方法包括一个chrome扩展和一个纯文本。\n```js\n(function(console){\n\n    console.save = function(data, filename){\n\n        if(!data) {\n            console.error('Console.save: No data')\n            return;\n        }\n\n        if(!filename) filename = 'console.json'\n\n        if(typeof data === \"object\"){\n            data = JSON.stringify(data, undefined, 4)\n        }\n\n        var blob = new Blob([data], {type: 'text/json'}),\n            e    = document.createEvent('MouseEvents'),\n            a    = document.createElement('a')\n\n        a.download = filename\n        a.href = window.URL.createObjectURL(blob)\n        a.dataset.downloadurl =  ['text/json', a.download, a.href].join(':')\n        e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null)\n        a.dispatchEvent(e)\n    }\n})(console)\n\n/* 测试 */\nvar data={name:'test'};\nconsole.save(data, [test.json]);\n```\n\n### formcontrols.js\n在一个不错的表中显示所有html表单元素及其值和类型。 在页面上为每个表单添加一个新表\n```js\n// formcontrols.js\n// https://github.com/bgrins/devtools-snippets\n// Print out forms and their controls\n\n(function() {\n\n  var forms = document.querySelectorAll(\"form\");\n\n  for (var i = 0, len = forms.length; i < len; i++) {\n    var tab = [ ];\n\n    console.group(\"HTMLForm quot;\" + forms[i].name + \"quot;: \" + forms[i].action);\n    console.log(\"Element:\", forms[i], \"\\nName:    \"+forms[i].name+\"\\nMethod:  \"+forms[i].method.toUpperCase()+\"\\nAction:  \"+forms[i].action || \"null\");\n\n    [\"input\", \"textarea\", \"select\"].forEach(function (control) {\n      [].forEach.call(forms[i].querySelectorAll(control), function (node) {\n        tab.push({\n          \"Element\": node,\n          \"Type\": node.type,\n          \"Name\": node.name,\n          \"Value\": node.value,\n          \"Pretty Value\": (isNaN(node.value) || node.value === \"\" ? node.value : parseFloat(node.value))\n        });\n      });\n    });\n\n    console.table(tab);\n    console.groupEnd();\n  }\n})();\n```\n\n### log-globals.js\n打印全局变量\n```js\n/*\n    log-globals\n    by Sindre Sorhus\n    https://github.com/sindresorhus/log-globals\n    MIT License\n*/\n(function () {\n    'use strict';\n\n    function getIframe() {\n        var el = document.createElement('iframe');\n        el.style.display = 'none';\n        document.body.appendChild(el);\n        var win = el.contentWindow;\n        document.body.removeChild(el);\n        return win;\n    }\n\n    function detectGlobals() {\n        var iframe = getIframe();\n        var ret = Object.create(null);\n\n        for (var prop in window) {\n            if (!(prop in iframe)) {\n                ret[prop] = window[prop];\n            }\n        }\n\n        return ret;\n    }\n\n    console.log(detectGlobals());\n})();\n```\n\n### 获取基本的运行时间信息\n```js\nvar timing = performance.timing;\nvar readyStart = timing.fetchStart - timing.navigationStart;\nvar redirectTime = timing.redirectEnd  - timing.redirectStart;\nvar appcacheTime = timing.domainLookupStart  - timing.fetchStart;\nvar unloadEventTime = timing.unloadEventEnd - timing.unloadEventStart;\nvar lookupDomainTime = timing.domainLookupEnd - timing.domainLookupStart;\nvar connectTime = timing.connectEnd - timing.connectStart;\nvar requestTime = timing.responseEnd - timing.requestStart;\nvar initDomTreeTime = timing.domInteractive - timing.responseEnd;\nvar domReadyTime = timing.domComplete - timing.domInteractive; //过早获取时,domComplete有时会是0\nvar loadEventTime = timing.loadEventEnd - timing.loadEventStart;\nvar loadTime = timing.loadEventEnd - timing.navigationStart;//过早获取时,loadEventEnd有时会是0\n\nconsole.log('准备新页面时间耗时: ' + readyStart);\nconsole.log('redirect 重定向耗时: ' + redirectTime);\nconsole.log('Appcache 耗时: ' + appcacheTime);\nconsole.log('unload 前文档耗时: ' + unloadEventTime);\nconsole.log('DNS 查询耗时: ' + lookupDomainTime);\nconsole.log('TCP连接耗时: ' + connectTime);\nconsole.log('request请求耗时: ' + requestTime);\nconsole.log('请求完毕至DOM加载: ' + initDomTreeTime);\nconsole.log('解释dom树耗时: ' + domReadyTime);\nconsole.log('load事件耗时: ' + loadEventTime);\nconsole.log('从开始至load总耗时: ' + loadTime);\n```\n\n### 资料网站\n[https://github.com/bgrins/devtools-snippets](https://github.com/bgrins/devtools-snippets)\n\n[https://github.com/sindresorhus/log-globals](https://github.com/sindresorhus/log-globals)\n","tags":["chrome","js","snippets"]},{"title":"jQuery图像浏览插件","url":"/2018/12/12/jQuery图像浏览插件/","content":"## 简介\nViewer.js 是一款强大的 jQuery 图像浏览插件。\n\nGitHub地址: [https://github.com/fengyuanchen/viewer](https://github.com/fengyuanchen/viewer)\n\n例子: [demo](https://fengyuanchen.github.io/viewerjs/)\n\n## 使用 :\n\n#### 引入css和js\n```\n<script src=\"/path/to/jquery.js\"></script><!-- jQuery is required -->\n<script src=\"/path/to/viewer.js\"></script>\n<link  href=\"/path/to/viewer.css\" rel=\"stylesheet\">\n```\n\n#### html 部分\n```\n<ul id=\"viewer\">\n    <li><img src=\"img/tibet-1.jpg\" data-original=\"img/tibet-1.jpg\" alt=\"图片1\"></li>\n    <li><img src=\"img/tibet-2.jpg\" data-original=\"img/tibet-2.jpg\" alt=\"图片2\"></li>\n    <li><img src=\"img/tibet-3.jpg\" data-original=\"img/tibet-3.jpg\" alt=\"图片3\"></li>\n</ul>\n```\n插件默认会取图片的src地址。如果想要放大之后换一张大图的话，可以把大图的路径写在data-original属性中，然后设置url:\"data-original\" 。\n\nalt用来存放图片的标题。\n\n#### JavaScript 部分\n```\n$('#viewer').viewer();\n或者\n$('#viewer').viewer({url:\"data-original\"});\n```\n\n### 配置\n名称|类型|默认值|说明\n--|:--:|:--:|--:\ninline\t|布尔值\t|false\t|启用 inline 模式\nbutton\t|布尔值\t|true\t|显示右上角关闭按钮（jQuery 版本无效）\nnavbar\t|布尔值/整型\t|true\t|显示缩略图导航\ntitle\t|布尔值/整型\t|true\t|显示当前图片的标题（现实 alt 属性及图片尺寸）\ntoolbar\t|布尔值/整型\t|true\t|显示工具栏\ntooltip\t|布尔值\t|true\t|显示缩放百分比\nmovable\t|布尔值\t|true\t|图片是否可移动\nzoomable\t|布尔值\t|true\t|图片是否可缩放\nrotatable\t|布尔值\t|true\t|图片是否可旋转\nscalable\t|布尔值\t|true\t|图片是否可翻转\ntransition\t|布尔值\t|true\t|使用 CSS3 过度\nfullscreen\t|布尔值\t|true\t|播放时是否全屏\nkeyboard\t|布尔值\t|true\t|是否支持键盘\ninterval\t|整型\t|5000\t|播放间隔，单位为毫秒\nzoomRatio\t|浮点型\t|0.1\t|鼠标滚动时的缩放比例\nminZoomRatio\t|浮点型\t|0.01\t|最小缩放比例\nmaxZoomRatio\t|数字\t|100\t|最大缩放比例\nzIndex\t|数字\t|2015\t|设置图片查看器 modal 模式时的 z-index\nzIndexInline\t|数字\t|0\t|设置图片查看器 inline 模式时的 z-index\nurl\t|字符串/函数\t|src\t|设置大图片的 url\nbuild\t|函数\t|null\t|回调函数，具体查看演示\nbuilt\t|函数\t|null\t|回调函数，具体查看演示\nshow\t|函数\t|null\t|回调函数，具体查看演示\nshown\t|函数\t|null\t|回调函数，具体查看演示\nhide\t|函数\t|null\t|回调函数，具体查看演示\nhidden\t|函数\t|null\t|回调函数，具体查看演示\nview\t|函数\t|null\t|回调函数，具体查看演示\nviewed\t|函数\t|null\t|回调函数，具体查看演示\n\n参数的用法：\n```\n$('#viewer').viewer({url:\"data-original\"});\n```\n","tags":["js","jquery","viewer.js"]},{"title":"window上的todolist工具","url":"/2018/12/11/window上的todolist工具/","content":"\n##  简介\nwindows上的记录工具\n\n### 下载\n[todolist](/zip/todolist_exe.zip)\n\n下载解压后可以直接使用\n","tags":["windows","TodoList"]},{"title":"GitHub页面基础","url":"/2018/12/11/GitHub页面基础/","content":"## GitHub页面基础\nGitHub页面有两种基本类型：项目页面站点，用户和组织页面站点。\n\n### 发布源\n* 该master分支\n* 该gh-pages分支\n* 位于master分支上的名为“docs”的文件夹\n\n<center>\n<img src=\"/mypublic/blog_img/201901/20190128-1.png\" width=\"90%\" />\n</center>\n\n<center>\n<img src=\"/mypublic/blog_img/201901/20190128-2.png\" width=\"90%\" />\n</center>\n\n### 访问\n```\n项目页面站点 http(s)://<username>.github.io/<projectname>\n```\n","tags":["github","html"]},{"title":"创建免费blog","url":"/2018/12/11/创建blog/","content":"## Blog\n通过 [Hexo](https://hexo.io/)主题使用[AirCloud](https://github.com/aircloud/hexo-theme-aircloud) 、[GitHub](https://github.com/)创建[blog](https://zhanghuan2018.github.io/).\n\n### 前提\n安装 Node.js 、Git\n\n### 安装 Hexo\n``` bash\n$ npm install -g hexo-cli\n```\n\n### 建立网站\n``` bash\n$ hexo init blog\n$ cd hexo\n```\n\n### 运行服务\n``` bash\n$ hexo server\n$ ##简写\n$ hexo s\n```\n浏览器访问: [http://localhost:4000](http://localhost:4000)\n\n### 生成静态文件\n``` bash\n$ hexo generate\n$ ##简写\n$ hexo g\n$ hexo g -d #生成静态文件并部署\n```\n\n### github账号\n\n创建github账号，并配置能在本地git push\n\n创建项目 xxx.github.io\n\n### 部署到github\n``` bash\n$ #要安装 hexo-deployer-git\n$ npm install hexo-deployer-git --save\n#  #配置 _config.yml\n#  deploy:\n#    type: git\n#    repository: git@github.com:xxx.github.io.git 或者 https://github.com/xxx.github.io.git\n#    branch: master\n$ hexo deploy\n$ ##简写\n$ hexo d\n$ hexo d -g #生成静态文件并部署\n```\n\n\n### 清除文件\n``` bash\n$ hexo clean\n```\n\n清除缓存文件 (db.json) 和已生成的静态文件 (public)\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n","tags":["hexo","github","blog"]}]