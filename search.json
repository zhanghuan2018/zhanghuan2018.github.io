[{"title":"Webpack+vue开发(1)","url":"/2019/05/08/vue_webpack/Webpack+vue开发/","content":"## 初始化项目 （安装 node、npm）\n```\n创建项目文件夹, npm init -y 创建 package.json\n项目根目录下建立src和dist文件夹，分别用来存放项目源码和webpack编译后的代码\n```\n### 安装模块\n```\nvue npm install vue@1 --save\nnpm install webpack --save-dev\nnpm install --save-dev webpack-cli -g (全局安装)\n```\n\n## 入口文件\n### 在根目录下直接建立一个index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Demo</title>\n</head>\n<body>\n  <div id=\"app\">{{message}}</div>  <!-- Vue模板入口 -->\n  <script src=\"dist/main.js\"></script>\n</body>\n</html>\n```\n### 在src下建立一个main.js\n```js\nconst Vue = require('vue')\nnew Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue.js!'\n  }\n})\n```\n### 在package.json的 scripts 配置中添加运行脚本\n```json\n\"scripts\": {\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n  \"dev\": \"webpack src/main.js -o dist/main.js\"\n}\n```\n### 运行npm run dev\n\n## 打包\n```\nwebpack demo.js -o demo.bundle.js\n其中的一些参数值:\n  Version:webpack版本\n  time:这次打包所花费的时间\n列表信息\n  Asset:打包这次生成的文件\n  Size:这次生成文件的大小\n  Chunks:这次打包的分块\n  chunk Names:这次打包的名称\n```\n\n## 问题处理\n<label style=\"color:red\">\nModule not found: Error: Can't resolve 'dist/main.js'\n</label>\n原因是我的webpack版本过高,原来的命令已经不适用(webpack -v 查看版本)\n```\nwebpack src/main.js dist/main.js\n改成\nwebpack src/main.js -o dist/main.js\n```\n<label style=\"color:yellow\">\nWARNING in configuration\nThe 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.\n</label>\n黄色部分的警告的意思是,没有设置模式,有开发模式和生产模式两种,接下来,找到package.json.添加上\"dev\"和\"build\"这两个信息以及他们的值.\n```\n\"dev\": \"webpack --mode development\"\n\"build\": \"webpack --mode production\"\n```\n","tags":["webpack","vue"]},{"title":"微信公众号回调授权","url":"/2019/05/06/0506/微信公众号回调授权/","content":"## 网页授权回调域名的说明\n1、在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头；\n\n2、授权回调域名配置规范为全域名，比如需要网页授权的域名为：www.qq.com，配置以后此域名下面的页面http://www.qq.com/music.html 、 http://www.qq.com/login.html 都可以进行OAuth2.0鉴权。但http://pay.qq.com 、 http://music.qq.com 、 http://qq.com无法进行OAuth2.0鉴权\n\n**备注：回调不能设置其他域名是用户可以通过前端直接授权跳转到指定的域名会泄露信息**\n\n```php\n//1.获取到code\nfunction getBaseInfo(){\n   $appid=\"xxx\";\n   //这里的地址需要http://\n   $redirect_uri=urlencode(\"http://www.xxxx.cn/xxx.php/Index/getUserOpenId\");\n   $url=\"https://open.weixin.qq.com/connect/oauth2/authorize?appid=\".$appid.\"&redirect_uri=\".$redirect_uri.\"&response_type=code&scope=snsapi_base&state=123#wechat_redirect\";\n   header('location:'.$url);\n}\n\n//2.获取到网页授权的access_token\nfunction getUserOpenId(){\n   $appid=\"xxx\";\n   $appsecret=\"xxx\";\n   $code=$_GET['code'];\n   $url=\"https://api.weixin.qq.com/sns/oauth2/access_token?appid=\".$appid.\"&secret=\".$appsecret.\"&code=\".$code.\"&grant_type=authorization_code \";\n   //3.拉取用户的openid\n   $res = $this->http_curl($url,'get');\n   //打印即可看到用户的openid\n　 var_dump($res);\n}\n```\n","tags":["微信"]},{"title":"js判断客户端","url":"/2019/05/06/0506/js判断客户端/","content":"## js判断客户端\n```js\nvar ua = navigator.userAgent.toLowerCase();\nconsole.log(ua);\nvar isWeixin = ua.indexOf('micromessenger') != -1;\nconsole.log('isWeixin---'+isWeixin);\nvar isAndroid = ua.indexOf('android') != -1;\nconsole.log('isAndroid---'+isAndroid);\nvar isIos = (ua.indexOf('iphone') != -1) || (ua.indexOf('ipad') != -1);\nconsole.log('isIos---'+isIos);\n```\n","tags":["js"]},{"title":"docker里的nginx配置修改","url":"/2019/05/06/0506/docker里的nginx配置修改/","content":"## 修改nginx配置\n```\n#查看容器\ndocker ps -a\n\n#进入容器\ndocker exec -it 容器ID /bin/sh\n\n#重启容器\ndocker restart 容器ID\n\n```\n\n## 跨域nginx配置\n```\nserver {\n    listen       80;\n    server_name  127.0.0.1;\n\n    #跨域配置\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods GET,POST,OPTIONS;\n    add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,accesstoken';\n\n    root   /www;\n\n    location / {\n        index  index.htm index.html index.php;\n        if (!-e $request_filename) {\n          rewrite ^(.*)$ /index.php?s=$1 last;\n          break;\n        }\n    }\n\n    ......\n}\n\n```\n\n## 跨域注意事项\n```\n错误提示\nResponse to preflight request doesn't pass access control check: The 'Access-Control-Allow-Origin' header contains multiple values 'http://localhost:9080, *', but only one is allowed. Origin 'http://localhost:9080' is therefore not allowed access.\n```\n**Access-Control-Allow-Origin只允许一个值**\nnginx或php配置其中一种就可以了\n\n## php配置跨域\n```php\n//通用控制器添加：\npublic function init() {\n    parent::init();\n    //允许所有来源访问\n    header('Access-Control-Allow-Origin:*');    \n    //允许访问的方式\n    header('Access-Control-Allow-Method:GET,POST,PUT,PATCH,DELETE,HEAD,OPTIONS,HEAD');\n   //允许自定义的头部参数\n    header(\"Access-Control-Allow-Headers:Origin,X-Requested-With,Content-Type,Accept,Authorization\");   \n}\n\n//或者直接在入口文件头部添加：\n//允许所有来源访问\nheader('Access-Control-Allow-Origin:*');    \n//允许访问的方式\nheader('Access-Control-Allow-Method:GET,POST,PUT,PATCH,DELETE,HEAD,OPTIONS,HEAD');\n//允许自定义的头部参数\nheader(\"Access-Control-Allow-Headers:Origin,X-Requested-With,Content-Type,Accept,Authorization\");\n\n\n```\n","tags":["docker","nginx","跨域"]},{"title":"工作中问题","url":"/2019/04/30/0430/问题处理/","content":"## 关闭按钮事件监听\n```js\nvar index = parent.Layer.getFrameIndex(window.name);\nparent.$(\"#layui-layer\" + index).find(\".layui-layer-close\").on(\"click\", function () {\n  window.parent.$(\".toolbar .btn-refresh\").trigger('click');\n});\n```\n\n## 文本编辑器禁用\n```js\nrequire(['summernote'], function () {\n  $(\"#id\").summernote('disable');\n});\n```\n\n## ajax 提交数组\n```js\nFast.api.ajax({\n  url:'ajax',\n  data: {arr_str:arr.join(\",\")},\n},function (ret) {\n  console.log(ret);\n});\n```\n\n## 文本域换行处理\n```js\nvar textarea=$(this).parents('.form-group').find('textarea').val();\nvar arr = textarea.split(/[(\\r\\n)\\r\\n]+/);\n\n//去除前后空白\n$.trim(str);\n```\n\n## 样式图标修改\n```css\n.fa-eye-slash {\n  font-size:23px;\n  color:#57B99D;\n}\n.fa-eye {\n  font-size:23px;\n}\n.btn-reddit{\n  border-color:rgba(0,0,0,0);\n  background-color:rgba(0,0,0,0);\n}\n.btn-reddit:hover {\n  border-color:rgba(0,0,0,0);\n  background-color:rgba(0,0,0,0);\n}\n.fa-eye-slash:before {\n  content: \"\\f14a\";\n}\n.fa-eye:before {\n  content: \"\\f096\";\n}\n```\n\n## 获取url后缀\n```js\nvar extStart=url.lastIndexOf(\".\");\nvar ext=url.substring(extStart,url.length).toUpperCase();\nif($.inArray(ext,['.JPG','.JPEG','.PNG','.BMP','.PSD']) != -1){\n  console.log('是图片');\n}else{\n  console.log('不是图片');\n}\n```\n\n## layer.open 关闭回调\n```js\nlayer.open($.extend(commonObj, {\n\tarea : [ '1035px', '624px' ],\n\tcontent :'xxx.html',\n\tend: function() {\n\t\t//关闭回调\n\t}\n}));\n```\n\n## php后缀判断\n```php\n$exe=strtoupper(substr($url,strrpos($url,'.')+1));\n$type='';\nif(in_array($exe,['JPG','JPEG','PNG','BMP','PSD'])){\n  $type='image';\n}else if(in_array($exe,['3GP','MOV','WMV','MPG','MP4','FLV','AVI','SWF','M4V'])){\n  $type='video';\n}else{\n  $type='other';\n}\n\n//获取url的扩展名\nfunction getExt($url){\n　　$urlinfo =  parse_url($url);\n　　$file = basename($urlinfo['path']);\n　　if(strpos($file,'.') !== false)\n　　{\n　　　　$ext = explode('.',$file);\n　　　　return $ext[count($ext)-1];\n　　}\n　　return 'no extension';\n}\n```\n\n## 上传文件到服务器\n```\nscp -r file root@xxx.xxx.xxx.xxx:/file\n```\n","tags":["js"]},{"title":"js封装","url":"/2019/04/26/0426/js封装/","content":"## 封装一个toast插件\n```html\n<div id=\"toast\"></div>\n<style>\n* {\n    margin: 0;\n    padding: 0;\n}\n#toast {\n    position: absolute;\n    display: none;\n    left: 50%;\n    top: 50%;\n    z-index: 99999;\n    margin: 0 auto;\n    -webkit-transform: translate(-50%);\n    transform: translate(-50%);\n    width: 50%;\n    padding: 5px;\n    border-radius: 5px;\n    text-align: center;\n    color: #fff;\n    background-color: #000;\n}\n</style>\n<script>\n//使用方法\nvar toast = new Toast(\"toast\", \"你好，对话框\");\ntoast.show();\n</script>\n```\n\n## js核心代码\n```js\n\n(function() {\n    /***\n     * 信息提示组件Toast v1.0\n     * @param {Object} container 内容容器(必填)\n     * @param {Object} content 文字内容(可选)\n     * @param {Object} duration 显示时长(可选)\n     * 使用方法\n     * var toast = new Toast(\"toast\", \"你好，对话框\");\n     * toast.show();(支持回调函数)\n     */\n    function Toast(container, content, duration) {\n        this.container = document.getElementById(container);\n        this.content = content || \"这是一段对话\";\n        this.duration = duration || 2000;\n    }\n\n    Toast.prototype.show = function(callback) {\n        this.callback = callback || function() {};\n        this.container.style.opacity = 1;\n        this.container.style.display = \"block\";\n        this.container.innerHTML = this.content;\n\n        setTimeout(function() {\n            this.callback && this.callback();\n            this.hide();\n        }.bind(this), this.duration);\n\n        return this;\n    }\n\n    Toast.prototype.hide = function(callback) {\n        this.callback = callback || function() {};\n\n        this.container.style.display = \"none\";\n        this.callback && this.callback();\n        return this;\n    }\n\n    window.Toast = Toast;\n\n})(window);\n\n//Toas函数是一个构造函数，相当于面向对象语言中的类（class），并且有形参，函数内部代码相当于给成员变量赋值。通常在这里初始化成员变量，这就好理解了。接下里的show，hide方法都是在Toast上的原型上添加共有的方法，对应的是修饰词为public的一个成员方法。函数最后都会返回this（当前函数执行的上下文），是为了可以进行链式调用。这些方法都支持回调函数，当函数执行完毕后会执行传入的回调函数，这在编写插件的时候通常都会用到，比如说ajax请求完成后，你得到返回的数据，并且需要后续操作，这时就要用回调函数。因为代码都放在闭包环境下，外界访问不了里面的变量和方法,所以把Toast强行暴露出去，就可以在window访问到。\n\n```\n","tags":["js"]},{"title":"js闭包","url":"/2019/04/26/0426/js闭包/","content":"## 闭包\n\n### 函数作为返回值\n```js\n//对Array的求和,立刻求和\nfunction sum(arr) {\n    return arr.reduce(function (x, y) {\n        return x + y;\n    });\n}\nsum([1, 2, 3, 4, 5]); //15\n\n//对Array的求和,返回函数\nfunction lazy_sum(arr) {\n    var sum = function () {\n        return arr.reduce(function (x, y) {\n            return x + y;\n        });\n    }\n    return sum;\n}\nvar f = lazy_sum([1, 2, 3, 4, 5]); // function sum()\nf(); // 15\n\n//调用都会返回一个新的函数\nvar f1 = lazy_sum([1, 2, 3, 4, 5]);\nvar f2 = lazy_sum([1, 2, 3, 4, 5]);\nf1 === f2; // false\n\n```\n\n### 返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量\n```js\nfunction count() {\n    var arr = [];\n    for (var i=1; i<=3; i++) {\n        arr.push(function () {\n            return i * i;\n        });\n    }\n    return arr;\n}\nvar results = count();\nvar f1 = results[0];\nvar f2 = results[1];\nvar f3 = results[2];\nf1(); // 16\nf2(); // 16\nf3(); // 16\n//返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了4，因此最终结果为16\n\nfunction count() {\n    var arr = [];\n    for (var i=1; i<=3; i++) {\n        arr.push((function (n) {\n            return function () {\n                return n * n;\n            }\n        })(i));\n    }\n    return arr;\n}\nvar results = count();\nvar f1 = results[0];\nvar f2 = results[1];\nvar f3 = results[2];\n\nf1(); // 1\nf2(); // 4\nf3(); // 9\n\n```\n\n### 创建一个匿名函数并立刻执行\n```js\n(function (x) {\n    return x * x;\n})(3);// 9\n```\n\n### 在面向对象的程序设计语言里，比如Java和C++，要在对象内部封装一个私有变量，可以用private修饰一个成员变量。在没有class机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。我们用JavaScript创建一个计数器：\n```js\n'use strict';\nfunction create_counter(initial) {\n    var x = initial || 0;\n    return {\n        inc: function () {\n            x += 1;\n            return x;\n        }\n    }\n}\n\nvar c1 = create_counter();\nc1.inc(); // 1\nc1.inc(); // 2\nc1.inc(); // 3\n\nvar c2 = create_counter(10);\nc2.inc(); // 11\nc2.inc(); // 12\nc2.inc(); // 13\n\n//闭包还可以把多参数的函数变成单参数的函数。例如，要计算xy可以用Math.pow(x, y)函数，不过考虑到经常计算x2或x3，我们可以利用闭包创建新的函数pow2和pow3\n'use strict';\nfunction make_pow(n) {\n    return function (x) {\n        return Math.pow(x, n);\n    }\n}\n// 创建两个新函数:\nvar pow2 = make_pow(2);\nvar pow3 = make_pow(3);\nconsole.log(pow2(5)); // 25\nconsole.log(pow3(7)); // 343\n\n\n\n```\n","tags":["js"]},{"title":"windows局域网访问数据库","url":"/2019/04/18/0418/windows局域网访问数据库/","content":"## 修改mysql用户权限\n```\n//赋予任何主机访问数据的权限\nmysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '登陆密码' WITH GRANT OPTION;  \n//修改生效\nmysql>FLUSH PRIVILEGES;\n\n//授权用户能进行远程连接\ngrant all privileges on *.* to root@\"%\" identified by \"password\" with grant option;\n//刷新权限信息\nflush privileges;\n```\n\n## 查看端口情况\n```\nnetstat -an|grep 3306\n```\n来查看mysql默认的端口3306是否开启，允许哪个ip使用，如果你发现，前面有127.0.0.1，就说明，3306端口只能本机ip使用\n\n打开mysql配置文件vi /etc/mysql/mysql.conf.d/mysqld.cnf(windows下是mysql.ini) 注释其中的：bind-address = 127.0.0.1配置或者修改为bind-address = 0.0.0.0，来允许所有IP访问，或者输入一个你指定的IP地址。保存推出后使用以下命令重启mysql\n\n## windows和linux下都检查防火墙，关闭防火墙\n\n## windows查看远程主机的端口是否可以连接\n```\n//确认远程主机的ip是否可以连通\nping 211.22.2.2\n\n//确认端口是否正在被监听，使用“telnet”命令\ntelnet www.baidu.com 80\n或者\ntelnet\n>o www.baidu.com 80\n\n```\n","tags":["windows","mysql"]},{"title":"对用户密码进行加盐处理","url":"/2019/04/18/0418/数据安全处理/","content":"## 直接对重要数据进行MD5处理后，反向解密确实难度很大，但还是可以找出破绽的\n密码相同的数据，数据库里的值是相同的\n\n那么我们以前的加密方法是否对这种行为失效了呢？其实只要稍微混淆一下就能防范住了，这在加密术语中称为“加盐”。具体来说就是在原有材料（用户自定义密 码）中加入其它成分（一般是用户自有且不变的因素），以此来增加系统复杂度。当这种盐和用户密码相结合后，再通过摘要处理，就能得到隐蔽性更强的摘要值。 下面请见代码：\n\n```java\n// 对密码进行加盐后加密，加密后再通过Hibernate往数据库里存\nString changedPswd=DigestUtils.md5Hex(name+pswd);\n```\n\n就是这样简单，上面代码中盐就是用户名，可以的话还可以用用户注册时的邮件，注册时间等非空信息（如果是空信息这个加盐处理会失效）。\n\n```php\n$salt='123abc'; //6位随机数，也存储在数据库\n$password = md5(md5($password) . $salt);\n```\n"},{"title":"社会信用编码验证","url":"/2019/04/18/0418/社会信用编码验证/","content":"## 验证js\n\n```js\nfunction CheckSocialCreditCode(Code) {\n    var patrn = /^[0-9A-Z]+$/;\n    //18位校验及大写校验\n    if ((Code.length != 18) || (patrn.test(Code) == false)) {\n        console.info(\"不是有效的统一社会信用编码！\");\n        return false;\n    } else {\n        var Ancode;//统一社会信用代码的每一个值\n        var Ancodevalue;//统一社会信用代码每一个值的权重\n        var total = 0;\n        var weightedfactors = [1, 3, 9, 27, 19, 26, 16, 17, 20, 29, 25, 13, 8, 24, 10, 30, 28];//加权因子\n        var str = '0123456789ABCDEFGHJKLMNPQRTUWXY';\n        //不用I、O、S、V、Z\n        for (var i = 0; i < Code.length - 1; i++) {\n            Ancode = Code.substring(i, i + 1);\n            Ancodevalue = str.indexOf(Ancode);\n            total = total + Ancodevalue * weightedfactors[i];\n            //权重与加权因子相乘之和\n        }\n        var logiccheckcode = 31 - total % 31;\n        if (logiccheckcode == 31) {\n            logiccheckcode = 0;\n        }\n        var Str = \"0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,J,K,L,M,N,P,Q,R,T,U,W,X,Y\";\n        var Array_Str = Str.split(',');\n        logiccheckcode = Array_Str[logiccheckcode];\n\n\n        var checkcode = Code.substring(17, 18);\n        if (logiccheckcode != checkcode) {\n            console.info(\"不是有效的统一社会信用编码！\");\n            return false;\n        } else {\n            console.info(\"yes\");\n        }\n        return true;\n    }\n}\n```\n","tags":["js"]},{"title":"jq点击图片查看大图","url":"/2019/04/18/0418/jq点击查看大图/","content":"## 点击显示大图\n\n```js\n<img  onclick=\"showBigImg(this);\" name=\"'+name+'\" src=\"url\" style=\"max-width:300px;max-height:300px;cursor:pointer;bottom:0px;position:absolute;\">\n/* 点击 显示大图 */\nfunction showBigImg(t){\n  var url = $(t).attr('src');\n  var img_infor = \"<div ><img style='height: 500px' src='\" + url + \"' /></div>\";\n  layer.open({\n      type: 1,\n      closeBtn: 1,\n      shade: 0.5,\n      title: false,\n      skin: 'demo-class',\n      shadeClose: true,\n      area:['auto','auto'],\n      content: img_infor\n  });\n}\n```\n\n## 例子\n\n<center>\n<img onclick=\"showBigImg(this);\" src=\"/post_img/20190418/1.jpg\" width=\"90%\" />\n</center>\n<script type=\"text/javascript\">\n/* 点击 显示大图 */\nfunction showBigImg(t){\n  var url = $(t).attr('src');\n  var img_infor = \"<div ><img style='height: 500px' src='\" + url + \"' /></div>\";\n  layer.open({\n      type: 1,\n      closeBtn: 1,\n      shade: 0.5,\n      title: false,\n      skin: 'demo-class',\n      shadeClose: true,\n      area:['auto','auto'],\n      content: img_infor\n  });\n}\n</script>\n","tags":["jq"]},{"title":"文件上传jq限制判断","url":"/2019/04/17/0417/文件上传jq限制判断/","content":"## 文件上传 类型、大小 限制判断\n```js\nvar _this=this;\nvar fileObj = $(_this)[0].files[0];\nif(validateVideo(_this)){\n//通过判断文件符合条件\n}\n\nfunction validateVideo(ele){\n  var file = ele.value;\n  if(!file){\n    return false;\n  }\n  var extStart=file.lastIndexOf(\".\");\n  var ext=file.substring(extStart,file.length).toUpperCase();\n  //var video_arr=['.MP4','.FLV','.AVI','.SWF'];\n  var image_arr=['.JPG','.JPEG','.PNG'];\n  if($.inArray(ext,video_arr) == -1){\n    layer.msg(\"视频类型必须是mp4中的一种\", {icon: 2});\n    return false;\n  }else{\n    if(ele.files[0]&&((ele.files[0].size).toFixed(2))>=(20*1024*1024)){\n      layer.msg(\"请上传小于20M的视频\",{icon: 2});\n      return false;\n    }else{\n      return true;\n    }\n  }\n}\n\n```\n\n## 文件 ajax 上传\n```js\nvar loadIndex = null;\nvar vv='111';\nvar fileObj = $(_this)[0].files[0];\nvar form = new FormData();\nform.append(\"file\",fileObj);\nform.append(\"vv\",vv);\n\n$.ajax({\n  type:\"POST\",\n  url:'请求地址',\n  data:form,\n  processData:false,\n  contentType : false,\n  dataType:'json',\n  beforeSend: function () {\n    loadIndex = layer.load(1, {\n      shade: [0.1, '#fff']\n    });\n  },\n  complete: function () {\n    layer.close(loadIndex);\n  },\n  success:function (res) {\n    if(res.status==200){\n      console.log(res);\n      resfun(res.data);\n    }else{\n      layer.msg(res.msg,{icon:2});\n    }\n  },\n  error:function (xhr, type, errorThrown) {\n    layer.msg('上传错误,代码'+xhr.status,{icon:2});\n  }\n});\n\n```\n","tags":["jq"]},{"title":"jq移除事件","url":"/2019/04/17/0417/jq移除事件/","content":"## 移除事件\n```js\nunbind(type [,data])//data是要移除的函数\n\n$('#btn').unbind(\"click\"); //移除click\n\n$('#btn').unbind(); //移除所有\n\n//对于只需要触发一次的，随后就要立即解除绑定的情况，用one()\n$('#btn').one(\"click\",function(){.......});\n\n//模拟操作可以用trigger()方法完成模拟操作。\n$('#btn').trigger(\"click\");\n$('#btn').click();\n\n//触发自定义事件\n$('#btn').bind(\"myclick\",function(){....});\n$('#btn').trigger(\"myclick\");\n\n//传递数据\ntrigger(type [,data])\n$('#btn').bind(\"myclick\",function(event,message1,message2){...........});\n$('#btn').trigger(\"myclick\",[\"传给message1\",\"传给message2\"]);\n\n//执行默认操作\n$(\"input\").trigger(\"focus\");\n//不仅会触发input元素绑定的focus事件，还会触发默认操作——得到焦点。\n$(\"input\").triggerHandler(\"focus\");\n//只触发绑定事件，不执行浏览器默认操作其他用法\n\n\n//绑定多个事件类型\n$(\"div\").bind(\"mouseover mouseout\",function(){.....});\n\n//添加事件命名空间\n$(\"div\").bind(\"click.plugin\",function(){......});\n\n//在所绑定的世界类型后面添加命名空间，这样在删除事件时只需要指定命名空间即可。\n$(\"div\").unbind(\".plugin\");   //删除空间内的事件\n$(\"div\").trigger(\"click!\"); //触发所以不包含在命名空间中的click方法\n\n//如果包含在命名空间的也要触发：\n$(\"div\").trigger(\"click\");\n\n```\n","tags":["jq"]},{"title":"html与css的知识","url":"/2019/04/17/0417/html与css的知识/","content":"## 禁用 a 标签的点击事件\n```js\n//a标签 是没有disable 属性的\n<a class=\"praise\">赞</a>\n\n$(\".praise\").attr(\"disabled\",true);\n$(\".praise\").css(\"pointer-events\",\"none\");\n\n$(\".praise\").attr(\"disabled\",true).css(\"pointer-events\",\"none\");\n\n//加入style=”opacity: 0.2”可以实现变灰的效果\n```\n\n## js添加的html代码绑定事件\n```js\n<img onclick=\"fun();\" />\n\n$(\"#id\").find('img').on('click',function(){});\n```\n","tags":["html","css"]},{"title":"window下启动程序","url":"/2019/04/09/0409/windows运行命令/","content":"## window下通过cmd运行命令\n```sh\n#后台运行,关闭cmd窗口后程序退出\nstart /b  xxx.exe\n\n#隐藏窗口运行命令\n%windir%\\system32\\mshta.exe vbscript:createobject(\"wscript.shell\").run(\"D:\\\\xxx.exe\",0)(window.close)\n\n```\n\n## vbs文件实现\n```sh\n#创建一个vbs文件，内容如下，把该vbs放入php-cgi.exe的上一级目录，双击即可在后台启动php-cgi.exe。\nset wscriptObj = CreateObject(\"Wscript.Shell\") wscriptObj.run \"php\\php-cgi -b 127.0.0.1:9000\",0\n```\n\n\n有些程序在命令行下运行的时候，当我们关闭命令行窗口以后，程序也关闭了。\n比如php-cgi的进程，我们在命令行下运行D:\\php\\php-cgi.exe -b 127.0.0.1:9000，命令行窗口一直开着，当我们关闭命令行窗口或按CTRL+C的时候，进程php-cgi也就关了。\n\n有些人通过RunHiddenConsole.exe来让php-cgi.exe在后台运行，命令如下：php\\RunHiddenConsole.exe php\\php-cgi.exe -b 127.0.0.1:9000 -c php\\php.ini\n\n有些人用nircmd.exe。运行的命令如下：nircmd.exe exec hide ..\\..\\php\\php-cgi.exe -b 127.0.0.1:9000 -c ..\\..\\php\\php.ini\n\n\n## windows下的Nginx和php搭配 php-cgi.exe自动关闭退出解决方法\nphp-cgi.exe在windows+nginx平台下经常自动退出，网上搜到的大部分解决方法都是类似上面的批处理（代码如下）文件临时解决一下，但如果用户在网站登录的话，用户就会突然挂掉。\n\n```\n#一个批处理文件\n@echo off\n:main\nset jinchengshuliang=0\nset jinchengshuliangxiaxian=2\nfor /f %%i in ('tasklist /nh^|findstr /i /s /c:\"php-cgi.exe\"') do set /a jinchengshuliang+=1\n\nif %jinchengshuliang% lss %jinchengshuliangxiaxian% (   \ngoto youwenti\n) else (\ngoto meiwenti\n)  \n\n:youwenti\necho 进程丢失，现在添加5个进程\nRunHiddenConsole.exe  php\\php-cgi.exe -b 127.0.0.1:9000 -c php\\php.ini\nRunHiddenConsole.exe  php\\php-cgi.exe -b 127.0.0.1:9000 -c php\\php.ini\nRunHiddenConsole.exe  php\\php-cgi.exe -b 127.0.0.1:9000 -c php\\php.ini\nRunHiddenConsole.exe  php\\php-cgi.exe -b 127.0.0.1:9000 -c php\\php.ini\nRunHiddenConsole.exe  php\\php-cgi.exe -b 127.0.0.1:9000 -c php\\php.ini\nping 127.1 -n 8\ngoto main\n\n:meiwenti\necho 正常运行中!\nping 127.1 -n 8\ngoto main\n```\n\n最好的解决办法是用windows下的php-cgi进程管理器xxfpm，该进程管理器需要用到pthreadGC2.dll。源码和编译文件在本文结尾提供下载。经测试，支持Win32和Linux-x86平台。对于用php的人，有了这个东西来维护一定数量的进程，就能制服经常崩溃退出的php-cgi啦！\n[xxfpm的github地址](https://github.com/78/xxfpm)\n\n### 报错缺少pthreadgc2.dll\n\n下载里找到 pthreadGC2.dll\n\n将这个文件复制到C:/Windows/SysWOW64目录（如果系统是32位的，将dll文件复制到C:\\Windows\\System32下）；\n\n然后打开\"开始-运行-输入regsvr32 pthreadgc2.dll，回车，如果报错，用下面的方法。\n\n新建一个文件 registe.bat，和pthreadgc2.dll同目录\n\n```\n @echo 开始注册\n copy pthreadgc2.dll %windir%\\SysWOW64\\\n regsvr32 %windir%\\SysWOW64\\pthreadgc2.dll /s\n @echo pthreadgc2.dll注册成功\n @pause\n```\n\n运行registe.bat，便会完成pthreadgc2.dll注册（如果32位的系统，请将system32替换为system32）。完了就可以将这个文件删了（不是删除windows目录下哈）\n\n\n\n```\n# xxfpm进程管理器的操作参数：\nUsage: xxfpm path [-n number] [-i ip] [-p port]\nManage FastCGI processes.\n\n-n, --number number of processes to keep\n-i, --ip ip address to bind\n-p, --port port to bind, default is 8000\n-u, --user start processes using specified linux user\n-g, --group start processes using specified linux group\n-r, --root change root direcotry for the processes\n-h, --help output usage information and exit\n-v, --version output version information and exit\n```\n\n第一个写得比较标准的终端应用程序，我是看了cygwin的里的一些源代码，然后学会了如何使用getopt，算是写得比较标准的，但是代码也不短。\n\n使用例子：\n\n```\nxxfpm z:/php5/php-cgi.exe -n 5 -p 8080\n```\n\n有人问，如何给程序加入参数？这个不难，使用双引号即可，路径要用\"/\"而不用\"\\\"。例如要指定php.ini的路径，可以用下面例子：\n\n```\nxxfpm \"z:/php5/php-cgi.exe -c z:/php5/php.ini\" -n 5 -i 127.0.0.1 -p 8080\n```\n\n维护进程原理：\n\nWindows上使用CreateProcess创建进程，使用Wait For Single Object等待进程结束；Linux上使用fork和execl创建进程，使用waitpid等待进程结束。Linux的版本多了在创建子进程的时候可以设置进程限制，能够以受限用户方式来运行。\n\n当进程管理器被关闭的时候，它所创建的所有子进程也必须被关闭。Windows上使用JobObject这个东西来把子进程与管理器的进程产生关联，感谢iceboy提供的资料！Linux上通过捕捉关闭信号，然后给所有子进程发送SIGTERM来结束子进程。详见源代码：\n\n```c\n#ifdef __WIN32__\n\n#ifndef _WIN32_WINNT\n#define _WIN32_WINNT 0x0500\n#endif //_WIN32_WINNT\n\n#include <windows.h>\n#include <winsock.h>\n#include <wininet.h>\n#define SHUT_RDWR SD_BOTH\n\n#ifndef JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE\n#define JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE (0x2000)\n#endif\nHANDLE FcpJobObject;\n\n#else\n\n#include <sys/socket.h>\n#include <sys/wait.h>\n#include <fcntl.h>\n#include <arpa/inet.h>\n#include <grp.h>\n#include <pwd.h>\n#include <unistd.h>\n#define closesocket close\n\n#endif //__WIN32__\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <getopt.h>\n#include <string.h>\n#include <pthread.h>\n#include <errno.h>\n\n#define MAX_PROCESSES 1024\nstatic const char version[] = \"$Revision: 0.01 $\";\nstatic char* prog_name;\nint number = 1;\nint port = 8000;\nchar *ip = \"127.0.0.1\";\nchar *user = \"\";\nchar *root = \"\";\nchar *path = \"\";\nchar *group = \"\";\nint listen_fd;\nstruct sockaddr_in listen_addr;\nint process_fp[MAX_PROCESSES];\nint process_idx = 0;\npthread_t threads[MAX_PROCESSES];\n\nstatic struct option longopts[] =\n{\n {\"help\", no_argument, NULL, 'h'},\n {\"version\", no_argument, NULL, 'v'},\n {\"number\", required_argument, NULL, 'n'},\n {\"ip\", required_argument, NULL, 'i'},\n {\"port\", required_argument, NULL, 'p'},\n {\"user\", required_argument, NULL, 'u'},\n {\"group\", required_argument, NULL, 'g'},\n {\"root\", required_argument, NULL, 'r'},\n {NULL, 0, NULL, 0}\n};\n\nstatic char opts[] = \"hvnipugr\";\n\nstatic void usage(FILE* where)\n{\n fprintf(where, \"\"\n  \"Usage: %s path [-n number] [-i ip] [-p port]\\n\"\n  \"Manage FastCGI processes.\\n\"\n  \"\\n\"\n  \" -n, --number  number of processes to keep\\n\"\n  \" -i, --ip      ip address to bind\\n\"\n  \" -p, --port    port to bind, default is 8000\\n\"\n  \" -u, --user    start processes using specified linux user\\n\"\n  \" -g, --group   start processes using specified linux group\\n\"\n  \" -r, --root    change root direcotry for the processes\\n\"\n  \" -h, --help    output usage information and exit\\n\"\n  \" -v, --version output version information and exit\\n\"\n  \"\", prog_name);\n exit(where == stderr ? 1:0);\n}\n\nstatic void print_version()\n{\n printf(\"%s %s\\n\\\nFastCGI Process Manager\\n\\\nCopyright 2010 Xiaoxia.org\\n\\\nCompiled on %s\\n\\\n\", prog_name, version, __DATE__);\n exit(0);\n}\n\nstatic int try_to_bind()\n{\n listen_addr.sin_family = PF_INET;\n listen_addr.sin_addr.s_addr = inet_addr( ip );\n listen_addr.sin_port = htons( port );\n listen_fd = socket(AF_INET, SOCK_STREAM, 0);\n\n if (-1 == bind(listen_fd, (struct sockaddr*)&listen_addr, sizeof(struct sockaddr_in)) ) {\n  fprintf(stderr, \"failed to bind %s:%d\\n\", ip, port );\n  return -1;\n }\n\n listen(listen_fd, MAX_PROCESSES);\n return 0;\n}\n\nstatic void* spawn_process(void* arg)\n{\n int idx = process_idx ++, ret;\n while(1){\n#ifdef __WIN32__\n  STARTUPINFO si={0};\n  PROCESS_INFORMATION pi={0};\n  ZeroMemory(&si,sizeof(STARTUPINFO));\n  si.cb = sizeof(STARTUPINFO);\n  si.dwFlags = STARTF_USESTDHANDLES;\n  si.hStdInput  = (HANDLE)listen_fd;\n  si.hStdOutput = INVALID_HANDLE_VALUE;\n  si.hStdError  = INVALID_HANDLE_VALUE;\n  if(0 == (ret=CreateProcess(NULL, path,\n   NULL,NULL,\n   TRUE, CREATE_NO_WINDOW | CREATE_SUSPENDED | CREATE_BREAKAWAY_FROM_JOB,\n   NULL,NULL,\n   &si,&pi)) ){\n   fprintf(stderr, \"failed to create process %s, ret=%d\\n\", path, ret);\n   return NULL;\n  }\n\n  /* Use Job Control System */\n  if(!AssignProcessToJobObject(FcpJobObject, pi.hProcess)){\n   TerminateProcess(pi.hProcess, 1);\n   CloseHandle(pi.hProcess);\n   CloseHandle(pi.hThread);\n   return NULL;\n  }\n\n  if(!ResumeThread(pi.hThread)){\n   TerminateProcess(pi.hProcess, 1);\n   CloseHandle(pi.hProcess);\n   CloseHandle(pi.hThread);\n   return NULL;\n  }\n\n  process_fp[idx] = (int)pi.hProcess;\n  WaitForSingleObject(pi.hProcess, INFINITE);\n  process_fp[idx] = 0;\n  CloseHandle(pi.hThread);\n#else\n  ret = fork();\n  switch(ret){\n  case 0:{ //child\n   /* change uid from root to other user */\n   if(getuid()==0){\n                struct group *grp = NULL;\n                struct passwd *pwd = NULL;\n    if (*user) {\n     if (NULL == (pwd = getpwnam(user))) {\n      fprintf(stderr, \"[fcgi] %s %s\\n\", \"can't find username\", user);\n      exit(-1);\n     }\n\n     if (pwd->pw_uid == 0) {\n      fprintf(stderr, \"[fcgi] %s\\n\", \"what? dest uid == 0?\" );\n      exit(-1);\n     }\n    }\n\n    if (*group) {\n     if (NULL == (grp = getgrnam(group))) {\n      fprintf(stderr, \"[fcgi] %s %s\\n\", \"can't find groupname\", group);\n      exit(1);\n     }\n\n     if (grp->gr_gid == 0) {\n      fprintf(stderr, \"[fcgi] %s\\n\", \"what? dest gid == 0?\" );\n      exit(1);\n     }\n     /* do the change before we do the chroot() */\n     setgid(grp->gr_gid);\n     setgroups(0, NULL);\n\n     if (user) {\n      initgroups(user, grp->gr_gid);\n     }\n    }\n    if (*root) {\n     if (-1 == chroot(root)) {\n      fprintf(stderr, \"[fcgi] %s %s\\n\", \"can't change root\", root);\n      exit(1);\n     }\n     if (-1 == chdir(\"/\")) {\n      fprintf(stderr, \"[fcgi] %s %s\\n\", \"can't change dir to\", root);\n      exit(1);\n     }\n    }\n\n    /* drop root privs */\n    if (*user) {\n     setuid(pwd->pw_uid);\n    }\n   }\n\n   int max_fd = 0, i=0;\n   // Set stdin to listen_fd\n   close(STDIN_FILENO);\n   dup2(listen_fd, STDIN_FILENO);\n   close(listen_fd);\n   // Set stdout and stderr to dummy fd\n   max_fd = open(\"/dev/null\", O_RDWR);\n   close(STDERR_FILENO);\n   dup2(max_fd, STDERR_FILENO);\n   close(max_fd);\n   max_fd = open(\"/dev/null\", O_RDWR);\n   close(STDOUT_FILENO);\n   dup2(max_fd, STDOUT_FILENO);\n   close(max_fd);\n   // close other handles\n   for(i=3; i<max_fd; i++)\n    close(i);\n   char *b = malloc(strlen(\"exec \") + strlen(path) + 1);\n   strcpy(b, \"exec \");\n   strcat(b, path);\n\n   /* exec the cgi */\n   execl(\"/bin/sh\", \"sh\", \"-c\", b, (char *)NULL);\n   exit(errno);\n   break;\n  }\n  case -1:\n   fprintf(stderr, \"[fcgi] fork failed\\n\");\n   return NULL;\n  default:{\n   struct timeval tv = { 0, 100 * 1000 };\n   int status;\n   select(0, NULL, NULL, NULL, &tv);\n   switch(waitpid(ret, &status, WNOHANG)){\n   case 0:\n    printf(\"[fcg] spawned process %s: %d\\n\", path, ret);\n    break;\n   case -1:\n    fprintf(stderr, \"[fcgi] waitpid failed\\n\");\n    return NULL;\n   default:\n    if (WIFEXITED(status)) {\n      fprintf(stderr, \"[fcgi] child exited with: %d\\n\", WEXITSTATUS(status));\n    } else if (WIFSIGNALED(status)) {\n      fprintf(stderr, \"[fcgi] child signaled: %d\\n\", WTERMSIG(status));\n    } else {\n      fprintf(stderr, \"[fcgi] child died somehow: %d\\n\", status);\n    }\n    return NULL;\n   }\n   //wait for child process to exit\n   process_fp[idx] = ret;\n   waitpid(ret, &status, 0);\n   process_fp[idx] = 0;\n  }\n  }\n#endif\n }\n}\n\nstatic int start_processes()\n{\n int i;\n pthread_attr_t attr;\n pthread_attr_init(&attr);\n pthread_attr_setstacksize(&attr, 64*1024); //64KB\n for(i=0; i<number; i++){\n  if( pthread_create( &threads, &attr, spawn_process, NULL ) == -1 ){\n   fprintf(stderr, \"failed to create thread %d\\n\", i);\n  }\n }\n\n for(i=0; i<number; i++){\n  pthread_join(threads, NULL);\n }\n return 0;\n}\n\n#ifdef __WIN32__\nvoid init_win32()\n{\n /* init win32 socket */\n static WSADATA wsa_data;\n if(WSAStartup((WORD)(1<<8|1), &wsa_data) != 0)\n  exit(1);\n JOBOBJECT_EXTENDED_LIMIT_INFORMATION limit;\n FcpJobObject = (HANDLE)CreateJobObject(NULL, NULL);\n if(FcpJobObject == NULL)\n  exit(1);\n\n /* let all processes assigned to this job object\n  * being killed when the job object closed */\n if (!QueryInformationJobObject(FcpJobObject, JobObjectExtendedLimitInformation, &limit, sizeof(limit), NULL)) {\n  CloseHandle(FcpJobObject);\n  exit(1);\n }\n\n limit.BasicLimitInformation.LimitFlags |= JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE;\n\n if (!SetInformationJobObject(FcpJobObject, JobObjectExtendedLimitInformation, &limit, sizeof(limit))) {\n  CloseHandle(FcpJobObject);\n  exit(1);\n }\n}\n#endif //__WIN32__\n\n#ifndef __WIN32__\nvoid before_exit(int sig)\n{\n signal(SIGTERM, SIG_DFL);\n /* call child processes to exit */\n kill(0, SIGTERM);\n}\n#endif\n\nint main(int argc, char **argv)\n{\n prog_name = strrchr(argv[0], '/');\n if(prog_name == NULL)\n  prog_name = strrchr(argv[0], '\\\\');\n if(prog_name == NULL)\n  prog_name = argv[0];\n else\n  prog_name++;\n\n if(argc == 1)\n  usage(stderr);\n\n path = argv[1];\n\n opterr = 0;\n\n char* p;\n\n for(;;){\n  int ch;\n  if((ch = getopt_long(argc, argv, opts, longopts, NULL)) == EOF)\n   break;\n  char *av = argv[optind];\n  switch(ch){\n  case 'h':\n   usage(stdout);\n   break;\n  case 'v':\n   print_version();\n   break;\n  case 'n':\n   number = atoi(av);\n   if(number > MAX_PROCESSES){\n    fprintf(stderr, \"exceeds MAX_PROCESSES!\\n\");\n    number = MAX_PROCESSES;\n   }\n   break;\n  case 'u':\n   user = av;\n   break;\n  case 'r':\n   root = av;\n   break;\n  case 'g':\n   group = av;\n   break;\n  case 'i':\n   ip = av;\n   break;\n  case 'p':\n   port = atoi(av);\n   break;\n  default:\n   usage(stderr);\n   break;\n  }\n }\n\n#ifdef __WIN32__\n init_win32();\n#else\n /* call child processes to exit */\n signal(SIGTERM, before_exit);\n signal(SIGINT, before_exit);\n signal(SIGABRT, before_exit);\n#endif\n\n int ret;\n ret = try_to_bind();\n if(ret != 0)\n  return ret;\n ret = start_processes();\n if(ret !=0)\n  return ret;\n\n\n#ifdef __WIN32__\n CloseHandle(FcpJobObject);\n WSACleanup();\n#endif\n return 0;\n}\n\n```\n","tags":["windows"]},{"title":"mysql的错误处理","url":"/2019/04/08/0408/mysql的处理/","content":"## MYSQL5.7版本sql_mode=only_full_group_by问题\n具体出错提示：\n\n```\n[Err] 1055 - Expression #1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column 'information_schema.PROFILING.SEQ' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\n```\n\n1、查看sql_mode\n\n```\nselect @@global.sql_mode\n#查询出来的值为：\nONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n2、去掉ONLY_FULL_GROUP_BY，重新设置值。\n\n```\nset @@global.sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n```\n","tags":["mysql"]},{"title":"网址ui框架","url":"/2019/03/11/0311/网址ui框架/","content":"##  AdminLTE\n[demo](https://adminlte.io/themes/AdminLTE/index2.html)\n\n[github地址](https://github.com/almasaeed2010/AdminLTE)\n\n## Bootstrap\n[Bootstrap](http://www.bootcss.com/)\n\n[Bootstrap v4](https://v4.bootcss.com/)\n\n[github地址](https://github.com/twbs/bootstrap)\n","tags":["html"]},{"title":"TP5数据处理","url":"/2019/03/08/0308/TP5数据处理/","content":"### 查询一个字段的值为字符串null或者not null\n```php\nwhere('title','=', 'null');\nwhere('name','=', 'not null');\n\n//Thinkphp中mysql查询字段不为空is not null 的写法\n$pic_banner['pic'] = array('exp','!= \"\"');\n$banner = $News->field(\"pic\")->where($pic_banner)->order('dateline desc')->limit(5)->select();\n\nwhere(\"url is null or url=''\");\n\n$where = new Where;\n$where['pid'] = 494;//应用中心 栏目ID\n$where['deleted'] = 0;//状态 0正常 1回收站\n$where['hide'] = 1;//显示是否 0显示 1隐藏\n$rs=Db::name('column')\n  ->field('id,icon,position,level,title,hide,url,controller,sort,pid,pid_all,spread,state,description')\n  ->where($where)\n  ->where(\"url is null or url=''\")\n  ->order('sort desc,id desc')\n  ->paginate($limit,false,['query' => request()->param()]);\n$page = $rs->render();\n$this->assign('page', $page);\n$this->assign('rs',$rs);\n\n/*\n1.不为空\nselect * from table where id <> \"\";\nselect * from table where id != \"\";\n2.为空\nselect * from table where id =\"\";\nselect * from table where isNull(id);\n*/\n```\n\n### 数据自动完成\n```php\n/*\ntp5的model只做业务层操作，不做具体的链接数据库sql操作。\nthink\\db\\Connection.php做链接数据库操作\nthink\\db\\Builder.php做创建sql操作\nthink\\db\\Query.php做数据CURD操作\n\n功能清单:\n数据自动完成\n自动写入时间戳\n时间字段自动格式化输出字段\n字段验证器\n自动关联写入\n只读字段\n隐藏字段\n事件回调\n软删除\n类型转换\n*/\n\n//数据自动完成\n//设置自动完成的字段，支持键值对数组和索引数组\n//新增和更新时都会使用\n//如：['name'=>'zhangsan','sex'=>'男']\n// ['name','sex']\nprotected $auto = [];\n//新增 自动完成列表\n//只在新增数据的时候使用\nprotected $insert = [];\n//更新 自动完成列表\n//只在更新数据的时候使用\nprotected $update = [];\n//用来标记当前操作被修改的字段\n//如 ['name','sex']\nprotected $change = [];\n//依赖方法,model类会自动调用解析auto数组\n//我们只需配置auto数组即可\nprotected function autoCompleteData($auto = []){}\n\n/*\n在model中设置完auto字段后在更新或新增的时候首先会判断auto中设置的字段是否存在于被更新的字段($this->change)中\n如果存在则不用auto里设置的字段和值\n如果不存在则将auto里设置的字段和值添加到this−>data中并把该字段新增到this->change中。\n如果auto是索引数组，也就是只设置了字段名，没有设置子字段值，这是就会根据字段名去$this->data中查询该字段值，并添加的到要更新的属性数组中去。\n新增数据的方法是create, 修改数据的方法是update,批量新增和修改的方法是saveAll,这几个方法的最终实现都是调用的save方法\nsaveAll方法批量新增和修改，并不是组合sql语句，而是开启事务，然后调用save方法，一条一条添加和修改，最后提交事务。\n在更新操作中，model会自动检查data的所有字段的值是否被更改，只会跟新被更改过得字段的值。没被更改的则被忽略。\ninsert、update的功能和auto的功能类似，只不过auto是不管是新增数据和是更新数据都会使用，而insert值针对新增，update只针对更新。如果设置了相同的属性，insert和update的则会覆盖auto中的字段。\n*/\n\n//自动写入时间戳\n//是否需要自动写入时间戳\n//可以是字符串类型和boolean类型\n//字符串类型代表要写入的时间格式\n//如： 'Y-m-d H:i:s'\n//boolean类型就是true和false，代表是否开启\n//默认时间格式为int类型\nprotected $autoWriteTimestamp;\n//默认自动写入的字段有\n//创建时间和更新时间，他们对应的字段名分别是\n//create_time,和update_time\n//也可以在model里自己设置。\nprotected $createTime = 'create_time';\nprotected $updateTime = 'update_time';\nprotected $dateFormat = 'Y/m/d H:i';\n\n\n//字段验证器\n//字段验证规则\nprotected $validate = [];\n//是否采用批量验证\nprotected $batchValidate = false;\n/**\n * 设置字段验证\n * @access public\n * @param array|string|bool $rule  验证规则 true表示自动读取验证器类\n * @param array             $msg   提示信息\n * @param bool              $batch 批量验证\n * @return $this\n */\npublic function validate($rule = ture,$msg=[],$bath=false){}\n/**\n * 自动验证数据\n * @access protected\n * @param array $data  验证数据\n * @param mixed $rule  验证规则\n * @param bool  $batch 批量验证\n * @return bool\n */\npublic function validateData($data,$rule=null,$batch=null){}\n\n\n  //使用方式\n  //在model中配置字段验证规则,在整个model中新增和更新操作都通用。\n  // 优点：只需要设置一次，即可通用\n  // 缺点：无法针对化设置\n  //比如：新增用户和编辑用户功能，\n  //新增是密码为必填项，编辑时密码就是选填项了\n  //所以就不能再model里设置密码的验证规则了，\n  //这个时候就只能在新增的action里为密码做验证了。\n  protected $validate = [\n  'rule' => [\n  'name' => 'require',\n  //多个规则可以是用字符串用|分隔\n  //也可以使用数组['require','number','min'=>10,'max'=>80]\n  //使用字符串配置要被使用explode('|',$rule)转化成数组，所以使用数组配置效率更高\n  'age' => 'require|number|min:10|max:80',\n  'height' => 'between:100,200'\n  ],\n  'msg' => [\n  'name' => 'name不能为空',\n  'age.require' => 'age不能没空',\n  'age.number' => 'age必须是一个数字',\n  'age.min' => 'age最小为10',\n  'age.max' => 'age最大为80',\n  'height' => 'height只能在100到200之间'\n  ]\n  ];\n  //在具体操作时调用think\\Validate类来实现\n  //在类的头部，因为Validate文件。\n  use think\\Validate;\n\n\n  $validate = new Validate([\n      'name' => 'require',\n      'age' => 'require|number|min:10|max:80'\n  ],[\n      'name' => 'name不能为空',\n      'age.require' => 'age不能没空',\n      'age.number' => 'age必须是一个数字',\n      'age.min' => 'age最小为10',\n      'age.max' => 'age最大为80',\n  ]);\n\n  //使用check检查数据\n  if($validate->check($data)){\n\n      echo '数据格式符合要求';\n  }else{\n\n      //比如：name不能为空\n      echo $validate->getError();\n  }\n\n  //对比\n  //使用第一种方法在model里设置验证规则，虽然说结构看着比较合理，但是这种方法灵活性比较低，因为他是在save的时候去判断的，如果save失败，你不清楚是数据验证失败，还是说插入到数据失败。所以对于做提示验证很麻烦(因为数据验证的提示我们是直接返回给用户的，而数据库操作的提示一般我们是不返回给用户的，所以得到结果后还要做判断，先对比较麻烦)。\n  //使用第二种方法在action里定义一个_validate的函数，专门用来做数据校验，这中方法比较灵活，而且他是在在保存数据之前做的校验，所以返回结果分的比较清楚，对用户的提示也比较清晰，代码可读性也比较好。\n\n  //自动关联写入\n\n  // 关联对象\n  protected $relation;\n\n  // 关联自动写入(关联的属性名)\n  protectd $relationWrite = [];\n\n  //暂时没有使用，后续再继续不补充。\n\n  //只读字段\n\n  //用来保护那些不许要被更新的字段。\n  //比如，创建时间\n  //设置后再更新数据时，会字段过滤掉create_time字段\n  //避免更新到数据库。\n  protected $readonly = ['create_time'];\n\n\n  //隐藏字段\n\n  //设置要隐藏的字段，\n  //该设置只在toArray(),和subToArray()方法中起作用\n  protected $hidden = [];\n  //相关方法\n  public function hidden($hidden=[],$override=false){\n}\n\n//当使用toArray和subToArray获得数组数据时，使用hidden字段和hidden函数可以隐藏数组中的元素。如：\n//user表的属性字段（模拟操作）\nuser_field = ['name','sex','age','height'];\n\n//在User模型中设置$hidden字段\nprotected $hidden = ['age','height'];\n\ndump($User->toArray()); //只有name和sex字段。\n\n//也可以调用hidden方法隐藏字段\n//会有 name,age,height 三个字段\ndump($User->hidde(['sex'])->toArray());\n\n//只有name字段了\n//第二个参数标识是否合并 $this->hidden\ndump($user->hidden(['sex'],true)->toArray());\n\n\n//事件回调\n\n//支持的回调事件\n//before_insert 新增前\n//after_insert 新增后\n//before_update 更新前\n//after_update 更新后\n//before_write 写入前（新增和更新都会调用）\n//after_write 写入后（新增和更新都会调用)\n//before_delete 删除前\n//after_delete 删除后\n//注册的回调方法支持传入一个参数，当前示例模型对象，并且before_write,before_insert,before_update,before_delete回false会结束执行。\n//使用方法\n//控制器里使用\n//支持给一个位置注册多个事件\nUser::event('before_insert',function($user){\n    if($user->status != 1){\n        return false;\n    }\n});\n\n//这个也会生效，回到函数为beforeInsert\nUser::event('before_insert','beforeInsert');\n\n//模型里使用\n//使用init方法统一注册模型事件\nclass User extends Model{\n    protected static function init(){\n        User::event('before_insert',function($user){\n            if($user->status != 1){\n                return false;\n            }\n        }\n        //注册第二个事件\n        User::event('before_insert','beforeInsert');\n    }\n}\n\n//原理\n//model类里有一个protected static $event = [];属性，注册的时间都存放在这个属性中。比如：\n$event = [\n    //模型名称\n    'user' => [\n        //事件名称\n        'before_insert' => [\n            'callback_funciton','beforeInsert'\n        ],\n        'after_insert' => [\n            'callback_function','afterInsert'\n        ],\n        'before_delete' => [\n            'beforeDelete'\n        ]\n    ]\n]\n\n//注册事件时，把所有的事件都保存在$event中了，然后在insert，update,delete等相应的位置调用即可。\n\n//软删除\n//简介\n//在实际项目中，对数据频繁的使用删除操作可能会导致性能问题，软删除的作用就是给数据加上删除标记，而不是真正的删除，同时也便于需要的时候恢复数据。\n//设置方式\n//使用软删除功能需要引用SoftDelete trait;如：\nnamespace app\\index\\model;\nuse think\\Model;\nuse think\\model\\SoftDelete;\nclass User extends Model{\n    // 使用SoftDelete\n    // trait 的使用方式\n    // 使用trait跟类的继承相似\n    use SoftDelete;\n    //软删除标记的字段名\n    protected $deleteTime = 'delete_time';\n}\n\n\n//dateteTIme属性用于标记数据表里的软删除字段，TP5里的软删除使用的是int类型，默认值为null(这个很重要，因为查询的时候是用delete_time is not null 来查询的),用于记录删除时间。\n//可以用类型转换指定软删除的字段类型，建议数据表里的所有时间字段使用同一种数据类型。\n\n//使用方式\n//在model中设置好后，就可以直接使用了\n//软删除\nUser::destory(1);\n\n//真删除\nUser::destory(1,true);\n\n//软删除\n$user = User::get(1);\n$user->delete();\n\n//真删除\n$user->delete(true);\n\n//默认情况下，查询出来的数据是不包括软删除的数据的，如果想要查询包括软删除的数据，可以使用下面的方式。\nUser::withTrashed()->find();\nUser::withTrashed()->select();\n\n//如果仅需要查询软删除的数据，可以这样：\nUser::onlyTranshed()->find();\nUser::onlyTranshed()->select();\n\n\n\n\n//类型转换\n//TP5支持给数据表中的字段设置类型，并会在读取和写入的时候自动转换。如：\nclass User extends Model{\n    protected $type = [\n        'status' => 'integer',\n        'score' => 'float',\n        'login_timme' => 'datetime',\n        'info' => 'array'\n    ];\n}\n\n//使用示例\n$user = new User;\n$user->status = '1';\n$user->score = '90.50';\n$user->birthday = '2015/5/1';\n$user->info = ['a'=>1,'b'=>2];\n$user->save();\nvar_dump($user->status); // int 1\nvar_dump($user->score); // float 90.5;\nvar_dump($user->birthday); // string '2015-05-01 00:00:00'\nvar_dump($user->info);// array (size=2) 'a' => int 1  'b' => int 2\n\n//注意： 如果制定为时间戳类型（timestamp）的话，该字段会在写入的时候自动调用strtotime函数生成对应的时间戳，输出是自动使用dateFormat格式化时间戳，默认格式为Y:m:d H:i:s,如果想要改变输出格式，可以如下：\nclass User extends Model{\n  protected $dataFormat = 'Y/m/d';\n  protected $type = [\n      'status' => 'integer',\n      'score' => 'float',\n      'birthday' => 'timestemp'//时间戳格式\n  ];\n}\n//或者如下：\nclass User extends Model{\n  protected $type = [\n      'status' => 'integer',\n      'socre' => 'float',\n      'birthday' => 'timestemp:Y/m/d'//写入时间戳，读取按照Y/m/d的格式来格式化输出。\n  ];\n}\n\n```\n","tags":["php","thinkphp5"]},{"title":"栅格布局","url":"/2019/03/08/0308/栅格布局/","content":"## css代码\n```css\n* {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n}\n\n.container {\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n@media (min-width: 768px) {/*当宽度大于768px时触发*/\n  .container {\n    width: 750px;\n  }\n}\n@media (min-width: 992px) {/*当宽度大于992px时触发*/\n  .container {\n    width: 970px;\n  }\n}\n@media (min-width: 1200px) {/*当宽度大于1200px时触发*/\n  .container {\n    width: 1170px;\n  }\n}\n\n/*  用min-width时，小的放上面大的在下面(从小到大)，同理如果是用max-width那么就是大的在上面，小的在下面(从大到小)  */\n\n.container-fluid { /*这个是宽度默认*/\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n\n\n.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2,/*后面代码省略，选择了所有的列，所有不同的列类型全部都有这样的有这样*/\n{\n  position: relative;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n}\n.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {\n  float: left;\n}\n.col-xs-12 {\n  width: 100%;\n}\n.col-xs-11 {\n  width: 91.66666667%;\n}\n.col-xs-10 {\n  width: 83.33333333%;\n}\n.col-xs-9 {\n  width: 75%;\n}\n.col-xs-8 {\n  width: 66.66666667%;\n}\n.col-xs-7 {\n  width: 58.33333333%;\n}\n.col-xs-6 {\n  width: 50%;\n}\n.col-xs-5 {\n  width: 41.66666667%;\n}\n.col-xs-4 {\n  width: 33.33333333%;\n}\n.col-xs-3 {\n  width: 25%;\n}\n.col-xs-2 {\n  width: 16.66666667%;\n}\n.col-xs-1 {\n  width: 8.33333333%;\n}\n\n\n.col-md-push-1 {\n  left: 8.33333333%;\n}\n.col-md-push-0 {\n  left: auto;\n}\n.col-md-offset-1 {\n  margin-left: 8.33333333%;\n}\n.col-md-offset-0 {\n  margin-left: 0;\n}\n\n```\n\n## Bootstrap 响应式布局\n\n.col-xs-* 针对超小屏幕 手机（<768px）\n\n.col-sm-* 小屏幕 平板 (≥768px)\n\n.col-md-* 中等屏幕 桌面显示器 (≥992px)(栅格参数)\n\n.col-lg-* 针对特大的（≥1200px）\n\n> ``` .col-md-offset-* .col-md-push-* 用这些可以进行很好的细节的排版 ```\n","tags":["Bootstrap","css"]},{"title":"html页面在线预览PDF文件","url":"/2019/03/08/0308/html页面在线预览PDF文件/","content":"## html页面在线预览PDF文件\n依赖：jquery.media.js\n\n### html代码\n```html\n<script src=\"#springUrl('/static/js/sys/test.js')\"></script>\n<script type=\"text/javascript\" src=\"/static/js/lib/jquery.media.js\"></script>\n\n<div id=\"pdf_preview\"></div>\n```\n\n### js代码\n```js\nsrc = '******.pdf';\n$('#pdf_preview').media(\n{\n  width : '1380px',\n  height : '800px',\n  autoplay : true,\n  src : src,\n});\n```\n","tags":["jquery","pdf"]},{"title":"JS代码","url":"/2019/03/08/0308/JS代码例子/","content":"### 禁止编辑\n```js\n$('#id').find(\"*\").each(function() {\n  $(this).attr(\"disabled\", \"disabled\");\n});\n```\n\n### 点击事件\n```js\n$('.test').click(function() {\n  $('.content').append('<li>keso</li>');\n});\n//通过 append 添加.test之后的click无效\n//解决办法是 直接写在html 代码里 onclick=\"fun();\"\n```\n\n### 遍历元素\n```js\n$(\"li\").each(function(){\n  alert($(this).text())\n});\n```\n\n### jq添加元素\n```js\n//append() - 在被选元素的结尾插入内容\n//prepend() - 在被选元素的开头插入内容\n//after() - 在被选元素之后插入内容\n//before() - 在被选元素之前插入内容\n```\n\n### jq样式处理\n```js\nif($(t).hasClass(\"fa-minus-square\")){\n  $(t).parent().parent('.row').remove();\n}\nif($(t).hasClass(\"fa-plus-square\")){\n  $(t).removeClass(\"fa-plus-square\").addClass(\"fa-minus-square\");\n}\n```\n\n### jq获取值\n```js\n//getAttribute()方法\nconst getId = document.getElementById('getId');\n// //getAttribute()取值属性\nconsole.log(getId.getAttribute(\"data-id\"));//122\nconsole.log(getId.getAttribute(\"data-vice-id\"));//11\n// //setAttribute()赋值属性\ngetId.setAttribute(\"data-id\",\"48\");\nconsole.log(getId.getAttribute(\"data-id\"));//48\n\n//dataset()方法\n//data-前缀属性可以在JS中通过dataset取值，更加方便\nconsole.log(getId.dataset.id);//112\n//data-vice-id连接取值使用驼峰命名法取值\nconsole.log(getId.dataset.viceId);//11\n\n//赋值\ngetId.dataset.id = \"113\";//113\ngetId.dataset.viceId--;//10\n\n//新增data属性\ngetId.dataset.id2 = \"100\";//100\n\n//删除，设置成null，或者delete\ngetId.dataset.id2 = null;//null\ndelete getId.dataset.id2;//undefind\n\n//jquery data()方法  data-id=\"1\"\nvar id = $(\"#getId\").data(\"id\");\n//赋值\n$(\"#getId\").data(\"id\",\"100\");\n\n//jquery attr()方法\nvar id = $(\"#getId\").attr(\"data-id\");\n//赋值\n$(\"#getId\").attr(\"data-id\",\"100\");//100\n```\n\n### js 数组处理\n```js\nvar myMap = {};\n//塞入键值对\nmyMap['cityName'] = 'Beijing';\nmyMap['cityPopulation'] = 2152;\n//遍历\nfor(var key in myMap){\n    console.log(key + ' = ' + myMap[key]);\n}\n\n\nvar myMap = [];\n//塞入数据\nmyMap[] = 'Beijing';\nmyMap[] = 2152;\n//遍历\nfor (var i=0;i<myMap.length;i++){\n  console.log(i + ' ---> ' + myMap[i]);\n}\n```\n\n### 遍历\n```js\nvar array = [1,2,3,4,5,6,7];  \nfor (var i = 0; i < array.length; i) {  \n  console.log(i,array[i]);  \n}\n\nfor(let index in array) {  \n  console.log(index,array[index]);  \n};\nvar A = {a:1,b:2,c:3,d:\"hello world\"};  \nfor(let k in A) {  \n    console.log(k,A[k]);  \n}\n\narray.forEach(v=>{  \n    console.log(v);  \n});\narray.forEach（function(v){  \n    console.log(v);  \n});\n```\n\n\n### 数组转字符串\n```js\n//需要将数组元素用某个字符连接成字符串，示例代码如下：\nvar a, b,c;\na = new Array(a,b,c,d,e);\nb = a.join('-'); //a-b-c-d-e  使用-拼接数组元素\nc = a.join(''); //abcde\n```\n\n### 字符串转数组\n```js\n//实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回，示例代码如下：\nvar str = 'ab+c+de';\nvar a = str.split('+'); // [ab, c, de]\nvar b = str.split(''); //[a, b, +, c, +, d, e]\n```\n","tags":["js"]},{"title":"PHP代码","url":"/2019/03/08/0308/PHP代码例子/","content":"### php显示指定长度的字符串，超出长度以省略号填补尾部\n```php\n$str = '123456789';\nif (strlen($str)>5) $str=substr($str,0,5) . '...';\necho $str;\n```\n\n### ip为了防止个人信息暴露，屏蔽掉前两位以*来代替\n```php\n$ip = '192.168.0.1';\nlist($ip1,$ip2,$ip3,$ip4) = explode('.',$ip);\n$ip = \"*-*-$ip3-$ip4\";\necho $ip;\n```\n","tags":["php"]},{"title":"js jquery 获取元素(父节点,子节点,兄弟节点),元素筛选","url":"/2019/03/08/0308/元素筛选/","content":"\n### 一,js 获取元素(父节点,子节点,兄弟节点)\n```js\nvar test = document.getElementById(\"test\");\nvar parent = test.parentNode; // 父节点\nvar chils = test.childNodes; // 全部子节点\nvar first = test.firstChild; // 第一个子节点\nvar last = test.lastChile; // 最后一个子节点　\nvar previous = test.previousSibling; // 上一个兄弟节点\nvar next = test.nextSibling; // 下一个兄弟节点\n```\n\n### 二,jquery 获取元素(父节点,子节点,兄弟节点)\n```js\n$(\"#test1\").parent(); // 父节点\n$(\"#test1\").parents(); // 全部父节点\n$(\"#test1\").parents(\".mui-content\");\n$(\"#test\").children(); // 全部子节点\n$(\"#test\").children(\"#test1\");\n$(\"#test\").contents(); // 返回#test里面的所有内容，包括节点和文本\n$(\"#test\").contents(\"#test1\");\n$(\"#test1\").prev();  // 上一个兄弟节点\n$(\"#test1\").prevAll(); // 之前所有兄弟节点\n$(\"#test1\").next(); // 下一个兄弟节点\n$(\"#test1\").nextAll(); // 之后所有兄弟节点\n$(\"#test1\").siblings(); // 所有兄弟节点\n$(\"#test1\").siblings(\"#test2\");\n$(\"#test\").find(\"#test1\");\n```\n```js\n$(t).siblings(\":first\").html();//第一个兄弟\n$(t).siblings(\":last\").html();//最后一个兄弟\n\nvar obj={};\nobj.class_one=$(this).find(\"select:first\").val();\nobj.class_two=$(this).find(\"select:last\").val();\n```\n\n### 三,元素筛选\n```js\n// 以下方法都返回一个新的jQuery对象，他们包含筛选到的元素\n$(\"ul li\").eq(1); // 选取ul li中匹配的索引顺序为1的元素(也就是第2个li元素)\n$(\"ul li\").first(); // 选取ul li中匹配的第一个元素\n$(\"ul li\").last(); // 选取ul li中匹配的最后一个元素\n$(\"ul li\").slice(1, 4); // 选取第2 ~ 4个元素\n$(\"ul li\").filter(\":even\"); // 选取ul li中所有奇数顺序的元素\n```\n\n## parent()，parents()，closest()这些都能帮你实现查找父元素或节点\n\n#### parent([expr])  :parent\n```js\n//取得一个包含着所有匹配元素的唯一父元素的元素集合。\n$('#item1').parent().parent('.parent1');\n//匹配含有子元素或者文本的元素\n$('li:parent');\n```\n\n#### parents([expr])\n```js\n//取得一个包含着所有匹配元素的祖先元素的元素集合（不包含根元素）。可以通过一个可选的表达式进行筛选。\n$('#items').parents('.parent1');\n```\n\n\n#### closest([expr])\n```js\n//closest会首先检查当前元素是否匹配，如果匹配则直接返回元素本身。如果不匹配则向上查找父元素，一层一层往上，直到找到匹配选择器的元素。如果什么都没找到则返回一个空的jQuery对象。\n//closest和parents的主要区别是：1，前者从当前元素开始匹配寻找，后者从父元素开始匹配寻找；2，前者逐级向上查找，直到发现匹配的元素后 就停止了，后者一直向上查找直到根元素，然后把这些元素放进一个临时集合中，再用给定的选择器表达式去过滤；3，前者返回0或1个元素，后者可能包含0 个，1个，或者多个元素。\n\n//closest对于处理事件委派非常有用。\n\n$('#items1').closest('.parent1');\n```\n\n### 选择\n1、判断表格table没有某个属性的td\n```\ntable.find('td:not([data-yesexl])').addClass('ddd');\n```\n\n2、查找所有未选中的 input 元素\n```\n$(\"input:not(:checked)\")\n```\n\n### 选择元素禁用\n```\n$('#Form').find(\"*:not(.addimgfile *):not(input[name='id'])\").each(function() {\n    $(this).attr(\"disabled\", \"disabled\");\n});\n```\n","tags":["jquery","js"]},{"title":"PHP创建编号","url":"/2019/03/08/PHP创建编号/","content":"\n###  时间(6位)+id(10位，id大于10位时会超出10位)\n```php  \nfunction create_no(){ // 20190308 0000000001\n  $id = Model::getLastInsID();//表最后一个自增id\n  $key = date('Ymd');//时间\n  $var=sprintf(\"%010d\",$id);//补齐10位\n  return $key . $var;\n}\n```\n","tags":["php"]},{"title":"DropZone（文件上传插件）","url":"/2019/03/08/DropZone文件上传插件/","content":"## DropZone 例子\n\n### 1. html文件\ndropzone的原理是模拟表单来上传文件，html中的元素有多重形式。\n* 可以建立一个form表单：\n```html\n<form id=\"dropz\" action=\"/upload.php\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\">\n</form>\n```\n* 也可以不用表单的形式，直接用一个div\n```html\n<div id=\"dropz\"></div>\n```\n\n### 2.引入css文件\n引入dropzone.min.css之后会有更漂亮的外观；\n\n* 然后可以自己添加些外观样式覆盖它，如：\n```css\n<style>\n        #filedropzone{\n            width: 900px;\n            height: 220px;\n            margin-left: 200px;\n            margin-top: 100px;\n            border: 3px dashed green;\n            border-radius: 2%;\n            box-shadow: 3px 3px 5px #888888;\n\n        }\n</style>\n```\n\n### 3.js文件\n必须配置js才能上传\n* 1.如果没有引入jquery:\n```\nvar myDropzone = new Dropzone(\"div#mydropzone\", {url: \"/upload\"});\n```\n* 2.如果引入了jquery:\n```\n$(\"#dropz\").dropzone({url: \"/upload\"})\n```\n\n常用的配置项：\n* url : 必要参数，文件的上传地址；\n* maxFiles : 默认为null，可以指定为一个数值，限制最多文件数量。\n* maxFilesize : 限制文件的大小，单位是MB；\n* acceptedFiles : 允许上传的文件类型，文件扩展名以逗号隔开，格式见实例；\n* autoProcessQueue : 默认为true，即拖入文件立即自动上传；如果需要在上传之前有一些选择的操作，然后手动上传，可以把该属性设置为false，然后手动点击按钮上传；\n* paramName : 相当于input元素的name属性，默认为file。\n提示文本：\n* dictDefaultMessage : 没有任何文件被添加时的提示文本；\n* dictFallbackMessage：Fallback 情况下的提示文本。\n* dictInvalidInputType：文件类型被拒绝时的提示文本。\n* dictFileTooBig：文件大小过大时的提示文本。\n* dictCancelUpload：取消上传链接的文本。\n* dictCancelUploadConfirmation：取消上传确认信息的文本。\n* dictRemoveFile：移除文件链接的文本。\n* dictMaxFilesExceeded：超过最大文件数量的提示文本。\n```\n//添加监听事件：\n$(\"#dropz\").dropzone({\n    init: function() {\n        this.on(\"addedfile\", function(file) {\n            // actions...\n        });\n    }\n});\n　\n//没有添加jquery时：\ndropz.on(\"addedfile\", function(file) {\n    // actions...\n});\n```\n\n常用事件：\n* addedfile : 添加文件是发生\n* removefile : 手动从服务器删除文件时发生\n* success : 上传成功后发生\n* complete：当文件上传成功或失败之后发生。\n* canceled：当文件在上传时被取消的时候发生。\n* maxfilesreached：当文件数量达到最大时发生。\n* maxfilesexceeded：当文件数量超过限制时发生。\n* totaluploadprogress : 文件上传中的返回值，第一个参数为总上传进度(0到100)，第二个为总字节数，第三个为总上传字节数，利用这几个参数，可计算出上传速度，和剩余上传时间；\n\n\n### html文件demo\n```\n<link rel=\"stylesheet\" href=\"/static/plugins/dropzone/dropzone.css\">\n<div id=\"upload_div\">\n\n<p>请上传您的代码（如包含文件夹需要打包后再上传）</p>\n        <form id=\"filedropzone\" method=\"post\" action=\"/upload\" class=\"dropzone dz-clickable\" >\n            <div class=\"dz-default dz-message\">\n                <div class=\"dz-icon icon-wrap icon-circle icon-wrap-md\">\n                    <i class=\"fa fa-cloud-upload fa-3x\"></i>\n                </div>\n                <div>\n                    <p class=\"dz-text\">把打包后的代码拖放到这里</p>\n                    <p class=\"text-muted\">最多可上传2张照片</p>\n                </div>\n            </div>\n        </form>\n\n</div>\n\n<script src=\"/static/plugins/dropzone/dropzone.js\"></script>\n\n<script>\n    $(document).ready(function () {\n         Dropzone.options.filedropzone = {\n          url:\"{{ request.path }}\",\n          paramName: \"file\", // The name that will be used to transfer the file\n          maxFilesize: 1, // MB,\n          addRemoveLinks:true,\n          maxFiles:5,\n          uploadMultiple:true,\n          accept: function(file, done) {\n            if (! file.name.endsWith(\".zip\") ) {\n              alert(\"只能上传.zip格式的压缩包\")\n                done(\"文件为上传\")\n                myDropzone.removeFile(file);\n            }\n            else { done(); }\n          }\n        };\n\n\n      Dropzone.autoDiscover = false;\n      myDropzone = new Dropzone(\"#filedropzone\");\n      myDropzone.on(\"addedfile\", function(file) {\n        /* Maybe display some more file information on your page */\n      });\n\n      myDropzone.on(\"success\", function(file,response) {\n          /* Maybe display some more file information on your page */\n          console.log('filex upload done...', response);\n      } )\n\n    })\n\n</script>\n```\n　　\n\n### 完整示例：\n```\n$(\"#dropz\").dropzone({           \n    url: \"/files/uploading\",\n    maxFiles: 1,\n    maxFilesize: 1024,\n    acceptedFiles: \".jpg,.jpeg,.doc,.docx,.ppt,.pptx,.txt,.avi,.pdf,.mp3,.zip\",\n    autoProcessQueue: false,\n    paramName: \"file\",\n    dictDefaultMessage: \"拖入需要上传的文件\",\n    init: function () {\n        var myDropzone = this, submitButton = document.querySelector(\"#qr\"),\n        cancelButton = document.querySelector(\"#cancel\");\n        myDropzone.on('addedfile', function (file) {\n            //添加上传文件的过程，可再次弹出弹框，添加上传文件的信息\n        });\n        myDropzone.on('sending', function (data, xhr, formData) {\n            //向后台发送该文件的参数\n            formData.append('watermark', jQuery('#info').val());\n        });\n        myDropzone.on('success', function (files, response) {\n            //文件上传成功之后的操作\n        });\n        myDropzone.on('error', function (files, response) {\n            //文件上传失败后的操作\n        });\n        myDropzone.on('totaluploadprogress', function (progress, byte, bytes) {\n            //progress为进度百分比\n            $(\"#pro\").text(\"上传进度：\" + parseInt(progress) + \"%\");\n            //计算上传速度和剩余时间\n            var mm = 0;\n            var byte = 0;\n            var tt = setInterval(function () {\n                mm++;\n                var byte2 = bytes;\n                var remain;\n                var speed;\n                var byteKb = byte/1024;\n                var bytesKb = bytes/1024;\n                var byteMb = byte/1024/1024;\n                var bytesMb = bytes/1024/1024;\n                if(byteKb <= 1024){\n                    speed = (parseFloat(byte2 - byte)/(1024)/mm).toFixed(2) + \" KB/s\";\n                    remain = (byteKb - bytesKb)/parseFloat(speed);\n                }else{\n                    speed = (parseFloat(byte2 - byte)/(1024*1024)/mm).toFixed(2) + \" MB/s\";\n                    remain = (byteMb - bytesMb)/parseFloat(speed);\n                }\n                $(\"#dropz #speed\").text(\"上传速率：\" + speed);\n                $(\"#dropz #time\").text(\"剩余时间\"+arrive_timer_format(parseInt(remain)));\n                if(bytes >= byte){\n                    clearInterval(tt);\n                    if(byteKb <= 1024){\n                        $(\"#dropz #speed\").text(\"上传速率：0 KB/s\");\n                    }else{\n                        $(\"#dropz #speed\").text(\"上传速率：0 MB/s\");\n                    }\n                    $(\"#dropz #time\").text(\"剩余时间：0:00:00\");\n                }\n            },1000);\n        });\n        submitButton.addEventListener('click', function () {\n            //点击上传文件\n            myDropzone.processQueue();\n        });\n        cancelButton.addEventListener('click', function () {\n            //取消上传\n            myDropzone.removeAllFiles();\n        });\n    }\n});\n//剩余时间格式转换：\nfunction arrive_timer_format(s) {\n    var t;\n    if(s > -1){\n        var hour = Math.floor(s/3600);\n        var min = Math.floor(s/60) % 60;\n        var sec = s % 60;\n        var day = parseInt(hour / 24);\n        if (day > 0) {\n            hour = hour - 24 * day;\n            t = day + \"day \" + hour + \":\";\n        }\n        else t = hour + \":\";\n        if(min < 10){t += \"0\";}\n        t += min + \":\";\n        if(sec < 10){t += \"0\";}\n        t += sec;\n    }\n    return t;\n}\n```\n　\n\n```\n\n#urls.py\nfrom app01 import views\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^test/', views.dropzoneTest),\n]\n\n#views.py\nfrom django.shortcuts import render\n\ndef dropzoneTest(request):\n    if request.is_ajax():\n        file = request.FILES.get('file')\n        with open('file.jpg','wb') as f:\n            for line in file:\n                f.write(line)\n    return render(request,'dropzoneTest.html')\n\n#dropzoneDemo.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'dropzone.css' %}\">\n    <script src=\"{% static 'jquery-3.2.1.min.js' %}\"></script>\n    <script src=\"{% static 'dropzone.js' %}\"></script>\n</head>\n<body>\n<p>请上传身份照正反面照片</p>\n        <form id=\"filedropzone\" method=\"post\" action=\"{{ request.path }}\" class=\"dropzone dz-clickable\" >{% csrf_token %}\n            <div class=\"dz-default dz-message\">\n                <div class=\"dz-icon icon-wrap icon-circle icon-wrap-md\">\n                    <i class=\"fa fa-cloud-upload fa-3x\"></i>\n                </div>\n                <div>\n                    <p class=\"dz-text\">把证件信息拖放到这里</p>\n                    <p class=\"text-muted\">最多可上传2张照片</p>\n                </div>\n            </div>\n        </form>\n\n<!--------------------------------------------------------------->\n<script>\n$(document).ready(function () {\n    $(\"#filedropzone\").dropzone({\n        url: \"{{ request.path }}\",\n        maxFiles: 5,\n        maxFilesize: 1024,\n        acceptedFiles: \".jpg,.jpeg,.doc,.docx,.ppt,.pptx,.txt,.avi,.pdf,.mp3,.zip\",\n        autoProcessQueue: false,\n        paramName: \"file\",\n        dictDefaultMessage: \"拖入需要上传的文件\",\n        init: function () {\n            var myDropzone = this, submitButton = document.querySelector(\"#qr\"),\n                    cancelButton = document.querySelector(\"#cancel\");\n            myDropzone.on('addedfile', function (file) {\n                //添加上传文件的过程，可再次弹出弹框，添加上传文件的信息\n            });\n            myDropzone.on('sending', function (data, xhr, formData) {\n                //向后台发送该文件的参数\n                formData.append('watermark', jQuery('#info').val());\n            });\n            myDropzone.on('success', function (files, response) {\n                //文件上传成功之后的操作\n            });\n            myDropzone.on('error', function (files, response) {\n                //文件上传失败后的操作\n            });\n            myDropzone.on('totaluploadprogress', function (progress, byte, bytes) {\n                //progress为进度百分比\n                $(\"#pro\").text(\"上传进度：\" + parseInt(progress) + \"%\");\n                //计算上传速度和剩余时间\n                var mm = 0;\n                var byte = 0;\n                var tt = setInterval(function () {\n                    mm++;\n                    var byte2 = bytes;\n                    var remain;\n                    var speed;\n                    var byteKb = byte / 1024;\n                    var bytesKb = bytes / 1024;\n                    var byteMb = byte / 1024 / 1024;\n                    var bytesMb = bytes / 1024 / 1024;\n                    if (byteKb <= 1024) {\n                        speed = (parseFloat(byte2 - byte) / (1024) / mm).toFixed(2) + \" KB/s\";\n                        remain = (byteKb - bytesKb) / parseFloat(speed);\n                    } else {\n                        speed = (parseFloat(byte2 - byte) / (1024 * 1024) / mm).toFixed(2) + \" MB/s\";\n                        remain = (byteMb - bytesMb) / parseFloat(speed);\n                    }\n                    $(\"#dropz #speed\").text(\"上传速率：\" + speed);\n                    $(\"#dropz #time\").text(\"剩余时间\" + arrive_timer_format(parseInt(remain)));\n                    if (bytes >= byte) {\n                        clearInterval(tt);\n                        if (byteKb <= 1024) {\n                            $(\"#dropz #speed\").text(\"上传速率：0 KB/s\");\n                        } else {\n                            $(\"#dropz #speed\").text(\"上传速率：0 MB/s\");\n                        }\n                        $(\"#dropz #time\").text(\"剩余时间：0:00:00\");\n                    }\n                }, 1000);\n            });\n            submitButton.addEventListener('click', function () {\n                //点击上传文件\n                myDropzone.processQueue();\n            });\n            cancelButton.addEventListener('click', function () {\n                //取消上传\n                myDropzone.removeAllFiles();\n            });\n        }\n    });\n//剩余时间格式转换：\n    function arrive_timer_format(s) {\n        var t;\n        if (s > -1) {\n            var hour = Math.floor(s / 3600);\n            var min = Math.floor(s / 60) % 60;\n            var sec = s % 60;\n            var day = parseInt(hour / 24);\n            if (day > 0) {\n                hour = hour - 24 * day;\n                t = day + \"day \" + hour + \":\";\n            }\n            else t = hour + \":\";\n            if (min < 10) {\n                t += \"0\";\n            }\n            t += min + \":\";\n            if (sec < 10) {\n                t += \"0\";\n            }\n            t += sec;\n        }\n        return t;\n    }\n})\n</script>\n</body>\n</html>\n\n```\n","tags":["js","DropzoneJS"]},{"title":"DropzoneJS文件拖拽上传","url":"/2019/03/08/DropzoneJS文件上传库/","content":"## DropzoneJS是一个提供文件拖拽上传并且提供图片预览的开源类库.\n[DropzoneJS](http://wxb.github.io/dropzonejs.com.zh-CN/)\n\n## 使用\n\n### form作为上传区\n```html\n<!-- 引入Dropzone.js和dropzone.css然后使用表单form定义一个class=\"dropzone\"即可完成 -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Flask upload with Dropzone example</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='dropzone.css') }}\" type=\"text/css\" />\n    <script src=\"{{ url_for('static', filename='jquery.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='dropzone.js') }}\"></script>\n</head>\n<body>\n<!-- 第一种上传 -->        \n    <form id =\"myAwesomeDropzone\" action=\"{{ url_for('upload_file') }}\" class=\"dropzone\" method=\"POST\" enctype=\"multipart/form-data\"></form>\n<!-- 第一种上传 -->  \n</body>\n</html>\n```\n\n### div作为上传区\n```html\n<!-- div作为上传区也很简单 -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Flask upload with Dropzone example</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='dropzone.css') }}\" type=\"text/css\" />\n    <script src=\"{{ url_for('static', filename='jquery.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='dropzone.js') }}\"></script>\n</head>\n\n<body>\n<div id=\"myId\" class=\"dropzone\" style=\"width: 800px; height: 300px;\">点我上传</div>\n<script type=\"text/javascript\">\n        //下面两行是js和jquery的方式实现绑定div的例子，你选择一种即可\n        //var myDropzone = new Dropzone(\"#myId\", { url: \"{{ url_for('upload_file') }}\" });\n        $(\"#myId\").dropzone({ url: \"{{ url_for('upload_file') }}\" });\n     </script>\n\n</body>\n</html>\n```\n\n### form作为上传区配置\n```html\n<!-- 配置也分为两种，如果使用的form表单上传的就用如下方式配置 -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Flask upload with Dropzone example</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='dropzone.css') }}\" type=\"text/css\" />\n    <script src=\"{{ url_for('static', filename='jquery.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='dropzone.js') }}\"></script>\n</head>\n\n<body>\n    <form id =\"myAwesomeDropzone\" action=\"{{ url_for('upload_file') }}\" class=\"dropzone\" method=\"POST\" enctype=\"multipart/form-data\">        \n       <div class=\"fallback\">\n            <input name=\"file\" type=\"file\" multiple />\n        </div>\n    </form>\n<script type=\"text/javascript\">\n//两种配置方式，第一种，表单上传时的配置方式，可以打开form表单的注释，myAwesomeDropzone是表单的id\n    Dropzone.options.myAwesomeDropzone = {\n          paramName: \"file\", // The name that will be used to transfer the file\n          maxFilesize: 2, // MB\n          accept: function(file, done) {\n            if (file.name != \"justinbieber.jpg\") {\n                  done(\"Naha, you don't.\");\n            }else {\n                done();\n            }\n        }\n      };\n</script>\n\n</body>\n</html>\n\n```\n\n### div作为上传区配置\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Flask upload with Dropzone example</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='dropzone.css') }}\" type=\"text/css\" />\n    <script src=\"{{ url_for('static', filename='jquery.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='dropzone.js') }}\"></script>\n</head>\n\n<body>\n <div id=\"myId\" class=\"dropzone\" style=\"width: 800px; height: 300px;\">点我上传</div>\n<script type=\"text/javascript\">\n        //第二种配置，这种使用的是div做上传区域时使用的配置\n        Dropzone.autoDiscover = false;//不知道该行有什么用，欢迎高手下方评论解答\n        $(\"#myId\").dropzone({\n        url: \"{{ url_for('upload_file') }}\",\n        addRemoveLinks: true,        \n        method: 'post',\n        filesizeBase: 1024        \n        });\n\n</script>\n\n</body>\n</html>\n```\n\n### 主题\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset==\"utf-8\">\n\n  <!-- Latest compiled and minified CSS -->\n  <link rel=\"stylesheet\" href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\">\n\n  <!-- Optional theme -->\n  <link rel=\"stylesheet\" href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css\">\n  <script src=\"{{ url_for('static', filename='jquery.js') }}\"></script>\n  <script src=\"{{ url_for('static', filename='dropzone.js') }}\"></script>\n  <script>\n    Dropzone.autoDiscover = false;\n  </script>\n\n  <style>\n    html, body {\n      height: 100%;\n    }\n    #actions {\n      margin: 2em 0;\n    }\n\n\n    /* Mimic table appearance */\n    div.table {\n      display: table;\n    }\n    div.table .file-row {\n      display: table-row;\n    }\n    div.table .file-row > div {\n      display: table-cell;\n      vertical-align: top;\n      border-top: 1px solid #ddd;\n      padding: 8px;\n    }\n    div.table .file-row:nth-child(odd) {\n      background: #f9f9f9;\n    }\n\n\n\n    /* The total progress gets shown by event listeners */\n    #total-progress {\n      opacity: 0;\n      transition: opacity 0.3s linear;\n    }\n\n    /* Hide the progress bar when finished */\n    #previews .file-row.dz-success .progress {\n      opacity: 0;\n      transition: opacity 0.3s linear;\n    }\n\n    /* Hide the delete button initially */\n    #previews .file-row .delete {\n      display: none;\n    }\n\n    /* Hide the start and cancel buttons and show the delete button */\n\n    #previews .file-row.dz-success .start,\n    #previews .file-row.dz-success .cancel {\n      display: none;\n    }\n    #previews .file-row.dz-success .delete {\n      display: block;\n    }\n\n\n  </style>\n\n</head>\n<body>\n\n  <div class=\"container\" id=\"container\">\n    <h2 class=\"lead\">Configuration Demo</h2>\n    <div id=\"actions\" class=\"row\">\n\n      <div class=\"col-lg-7\">\n        <!-- 控制总体的三个按钮 -->\n        <span class=\"btn btn-success fileinput-button\">\n            <i class=\"glyphicon glyphicon-plus\"></i>\n            <span>Add files...</span>\n        </span>\n        <button type=\"submit\" class=\"btn btn-primary start\">\n            <i class=\"glyphicon glyphicon-upload\"></i>\n            <span>Start upload</span>\n        </button>\n        <button type=\"reset\" class=\"btn btn-warning cancel\">\n            <i class=\"glyphicon glyphicon-ban-circle\"></i>\n            <span>Cancel upload</span>\n        </button>\n      </div>\n\n      <div class=\"col-lg-5\">\n        <!-- 总体的进度 -->\n        <span class=\"fileupload-process\">\n          <div id=\"total-progress\" class=\"progress progress-striped active\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"0\">\n            <div class=\"progress-bar progress-bar-success\" style=\"width:0%;\" data-dz-uploadprogress></div>\n          </div>\n        </span>\n      </div>\n\n    </div>\n\n    <!--\n    data-dz-thumbnail：使用后代表该标签是存放缩略图的标签【这里必须是一个 <img /> 元素 ，并且alt 和 src 属性将被 Dropzone改变】\n    data-dz-name：存放文件名\n    data-dz-errormessage：存放错误信息\n    data-dz-size：存放文件大小\n    data-dz-remove ：删除队列中的文件，或者取消正在从队列上传到服务器的文件\n    data-dz-uploadprogress：上传进度【( 当这里有一个 uploadprogress事件时， Dropzone 将更改 style.width 属性从 0% 到 100% )】\n    -->\n\n    <div class=\"table table-striped files\" id=\"previews\">\n\n      <div id=\"template\" class=\"file-row\">\n        <div>\n            <span class=\"preview\"><img data-dz-thumbnail /></span>\n        </div>\n        <div>\n            <p class=\"name\" data-dz-name ></p>\n            <strong class=\"error text-danger\" data-dz-errormessage></strong>\n        </div>\n        <div>\n            <p class=\"size\" data-dz-size></p>\n            <div class=\"progress progress-striped active\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"0\">\n                <div class=\"progress-bar progress-bar-success\" style=\"width:0%;\" data-dz-uploadprogress></div>\n            </div>\n        </div>\n        <div>\n          <button class=\"btn btn-primary start\">\n              <i class=\"glyphicon glyphicon-upload\"></i>\n              <span>Start</span>\n          </button>\n          <button data-dz-remove class=\"btn btn-warning cancel\">\n              <i class=\"glyphicon glyphicon-ban-circle\"></i>\n              <span>Cancel</span>\n          </button>\n          <button data-dz-remove class=\"btn btn-danger delete\">\n            <i class=\"glyphicon glyphicon-trash\"></i>\n            <span>Delete</span>\n          </button>\n        </div>\n      </div>\n\n    </div>\n\n<script>\n\n      // Get the template HTML and remove it from the doument\n      var previewNode = document.querySelector(\"#template\");\n      previewNode.id = \"\";\n      var previewTemplate = previewNode.parentNode.innerHTML;\n      //开始先删除单个文件的布局\n      previewNode.parentNode.removeChild(previewNode);\n\n      var myDropzone = new Dropzone(document.body, { // 指定拖拽区为body\n        url: \"{{ url_for('upload_file') }}\", // Set the url\n        thumbnailWidth: 80,\n        thumbnailHeight: 80,\n        parallelUploads: 20,\n        previewTemplate: previewTemplate,\n        autoQueue: false, // 当队列有文件，是否立刻自动上传到服务器\n        previewsContainer: \"#previews\", // 指定存放文件队列区\n        clickable: \".fileinput-button\" // 点击某个按钮或区域后出现选择电脑中本地图片，默认是previewsContainer指定的区域\n      });\n\n      myDropzone.on(\"addedfile\", function(file) {\n        // 让模版中的单个文件可以点击上传\n        file.previewElement.querySelector(\".start\").onclick = function() { myDropzone.enqueueFile(file); };\n      });\n\n      // 显示所有文件整体上传进度1-100\n      myDropzone.on(\"totaluploadprogress\", function(progress) {\n        document.querySelector(\"#total-progress .progress-bar\").style.width = progress + \"%\";\n      });\n\n      myDropzone.on(\"sending\", function(file) {\n        // 显示整体的上传的进度条，说明：原来是0，所以上面的style.width = progress + \"%\"即使是100%也看不到\n        document.querySelector(\"#total-progress\").style.opacity = \"1\";\n        // 失效上传按钮\n        file.previewElement.querySelector(\".start\").setAttribute(\"disabled\", \"disabled\");\n      });\n\n      // 当没有文件上传时，隐藏进度条\n      myDropzone.on(\"queuecomplete\", function(progress) {\n        document.querySelector(\"#total-progress\").style.opacity = \"0\";\n      });\n\n      // 上传所有\n      document.querySelector(\"#actions .start\").onclick = function() {\n         myDropzone.enqueueFiles(myDropzone.getAcceptedFiles());\n        //myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED));与上面一样，可查看源码对比\n      };\n      //取消所有  \n      document.querySelector(\"#actions .cancel\").onclick = function() {\n        myDropzone.removeAllFiles(true);\n      };\n\n</script>\n\n</body>\n</html>\n\n\n<!-- 第二种效果与默认的一样 -->\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Flask upload with Dropzone example</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='dropzone.css') }}\" type=\"text/css\" />\n    <script src=\"{{ url_for('static', filename='jquery.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='dropzone.js') }}\"></script>\n</head>\n\n<body>\n\n<div id=\"myId\" class=\"dropzone\" style=\"width: 500px; height: 300px;\"></div>\n\n\n<div id=\"aaa\"></div>\n<div id=\"preview-template\" style=\"display: none;\">\n    <div class=\"dz-preview  dz-file-preview \">\n        <div class=\"dz-image\"><img data-dz-thumbnail /></div>\n        <div class=\"dz-details\">\n            <div class=\"dz-filename\"><span data-dz-name></span></div>\n            <div class=\"dz-size\" data-dz-size></div>\n        </div>\n        <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n        <div class=\"dz-success-mark\"><span>✔</span></div>\n        <div class=\"dz-error-mark\"><span>✘</span></div>\n        <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n    </div>\n</div>\n\n     <script type=\"text/javascript\">\n\n        Dropzone.autoDiscover = false;//解决两次实例Dropzone错误，可在控制台看到该错误\n        $(\"#myId\").dropzone({\n        url: \"{{ url_for('upload_file') }}\",\n        addRemoveLinks: true,        \n        method: 'post',\n        filesizeBase: 1024,\n        previewTemplate: $('#preview-template').html(),//如果去掉该选项就会使用默认的\n        autoQueue: true,\n        init: function() {\n                this.on(\"addedfile\", function(file) {\n                    $(\".start\").click (function() {\n                    this.enqueueFile(file);        \n                    })       \n                });\n            }\n        });  \n\n     </script>\n\n</body>\n</html>\n\n\n```\n","tags":["js","DropzoneJS"]},{"title":"关于thinkphp union多表关联查询 后排序及分页实现","url":"/2019/03/01/多表关联查询后排序及分页实现/","content":"## 遇到的问题：\n* union后直接排序或分页报错  Incorrect usage of UNION and ORDER BY?\n* fetchSql得到的查询语句是没有\"()\"括起来的，\n* buildSql 得到的查询语句有\"()\"括起来的；\n\n## 代码\n```php\n$matField = \"*\"   // 查询的字段s\n$matSql = Db::name('product')\n    ->alias(['product' => 'p', 'match_goods' => 'b', 'match_goods_son' => 'c', 'area' => 'd'])\n    ->field($matField)\n    ->join('match_goods', 'b.product_id = p.product_id')\n    ->join('match_goods_son', 'c.match_goods_id = b.match_goods_id')\n    ->join('area', 'p.province = d.id')\n    ->where($where)\n    ->where(['p.type' => 3, 'p.status' => 2])\n    ->buildSql();\n$actField = '*' //字段\n$data = Db::field($actField)\n    ->name('product')\n    ->alias(['product' => 'p', 'activity_goods' => 'b', 'activity_goods_son' => 'c', 'area' => 'd'])\n    ->join('activity_goods', 'b.product_id = p.product_id')\n    ->join('activity_goods_son', 'c.activity_goods_id = b.activity_goods_id')\n    ->join('area', 'p.province = d.id')\n    ->where($where)\n    ->where(['p.type' => 2, 'p.status' => 2])\n    ->union($matSql, true)\n    ->select(false);\n#注意：$matField 和$actField 字段名称要一致，且顺序也要一致\n$sql = \"($data)\";\n$res = Db::table($sql.' as a')->field('xx') // 这里xx与$matField 和$actField 字段名称要一致\n    ->order('a.sort DESC, a.sign_start_time DESC')\n    ->group('a.product_id')\n    ->page(1, 10)\n    ->select()->toArray();  \n```\n### 关联查询(JOIN)\n```php\n$model->alias('a')\n      ->join('admin_users u','a.admin_id = u.id','LEFT')\n      ->whereIn('u.type',[1,2]);\n\n//子查询(用group 把用户分组，统计签到表中每个用户签到的次数)\n$activitySign = Db::name('activity_sign')\n      ->field('member_id,count(member_id) sign_count')\n      ->group('member_id')\n      ->buildSql();\n//子查询(用group 把用户分组，统计签到表中每个用户报名的次数)\n$activityPar = Db::name('activity_participant')\n      ->field('member_id,count(member_id) count')\n      ->group('member_id')\n      ->buildSql();\n//用户主表(子查询中统计的值，可以直接在field中取出，并不需要再次统计)\n$list = Db::name('member')\n      ->alias('m')\n      ->field('m.member_id,sign_count,count,m.member_nickname')\n      ->join([$activitySign=> 'as'], 'm.member_id = as.member_id','left')\n      ->join([$activityPar=> 'ap'], 'm.member_id = ap.member_id','left')\n      ->paginate();\n```\n\n### SQL中UNION使用实例\n```sql\nSELECT id,name,age,classid,score\nFROM tb_Student\nWHERE age<=20\nUNION ALL\nSELECT id,name,age,classid,score\nFROM tb_Student\nWHERE score<90\n\n/* 查询结果中存在重复的记录，要想查询结果中不存在重复的记录,仅仅去掉了ALL关键字而已 */\n\nSELECT id,name,age,classid,score\nFROM tb_Student\nWHERE age<=20\nUNION\nSELECT id,name,age,classid,score\nFROM tb_Student\nWHERE score<90\n\n```\n","tags":["php","thinkphp5","sql"]},{"title":"TP5关联模板查询","url":"/2019/03/01/TP5关联模板查询/","content":"## ThinkPHP5有关联模型的操作\n```\nhasOne：有一个，加上主谓语应该是 ，A 有一个 B\nhasMany：有很多，A 有很多 B\nbelongsTo：属于， A 属于 B\nbelongsToMany：多对多\n\n一对一：HAS_ONE  以及对应的BELONEGS_TO\n一对多：HAS_MANY 以及相对的BELONGS_TO\n多对多：BELONGS_TO_MANY\n```\n\n### 确立关联模型\n在关系型数据库中，表之间有一对一、一对多、多对多的关系。在 TP5 中，实现了ORM (Object Relational Mapping) 的思想，通过在模型中建立模型间的关联，实现建立表与表之间的关联\n\n建立[E-R图](https://baike.baidu.com/item/E-R%E5%9B%BE)\n\n### 一对一\n```php\nclass User extends Model{\n   //定义关联方法\n   public function profile(){\n     return $this->hasOne('Profile','user_id','id');\n   }\n}\n\nclass Profile extends Model{\n    public function user(){\n      return $this->belongsTo('User');\n    }\n}\n\n#使用\npublic function add(){\n        $user = new UserModel;    \n        $user->name = 'thinkphp';\n        $user->password = '123456';\n        $user->nickname = '宝宝不舒服';\n        if($user->save()){\n            $profile['truename'] = '宝宝不舒服';\n            $profile['birthday'] = '1989-03-05';\n            $profile['address']  = '深圳';\n            $user->profile()->save($profile);\n            return $this->success('添加成功');\n        }else{\n            return $user->getError();\n        }\n}\n\npublic function read($id){\n    $user = UserModel::get($id);\n    if($user){\n      echo  $user->name;\n      echo  $user->nickname;\n      echo  $user->profile->truename;\n    }\n}\npublic function update($id){\n   $user = UserModel::get($id);\n   $user->name = 'framework';\n   if($user->save()){\n      $user->profile->email = '609392790@qq.com';\n      $user->profile->save();\n\n    }else{\n        return $user->getError();\n    }\n\n}\npublic  function delete($id){\n    $user = UserModel::get($id);\n    if($user->delete()){\n        $user->profile->delete();\n     }else{\n       return $user->getError();\n     }\n}\n```\n\n### 一对多\n```php\nclass User extends Model{\n  public  function books(){\n   return $this->hasMany('Book');\n  }\n\n}\nclass Book extends Model{\n  public function user(){\n     return $this->belongsTo('User');\n  }\n}\n\n#使用\npublic function addBook(){\n    $user = UserModel::get(1);\n    $book = new Book;\n    $book->title = 'thinkphp';\n    $book->publih_time = '2016-05-06';\n    $user->books()->save($book);\n}\npublic  function batchAddBook(){\n   $user = UserModel::get(1);\n   $book = [\n     ['title'=>'thinkphp5.0','publish'=>'2016-05-06'],\n     ['title'=>'thinkphp3.2','publish'=>'2014-05-06']\n   ];\n    $user->books()->saveAll($books);\n}\npublic function read(){\n  $user = UserModel::get(1);\n  $books = $user->books()->where('status',1)->select();\n  $book  = $user->books()->getByTitle('宝宝想哭');\n}\npublic function read(){\n  //查询写过书的作者列表\n  $user = UserModel::has('books')->select();\n  //查询写过三本书以上的作者\n  $user = UserModel::has('books','>=',3)->select();\n  //查询写过宝宝不哭的作者\n  $user = UserModel::hasWhere('books',['title'=>'宝宝不哭'])->select();\n}\npublic  function update($id){\n  $user = UserModel::get($id);\n  $book = $user->books()->where('title','宝宝不哭')->update(['title'=>'宝宝就要哭']);\n}\npublic function delete($id){\n   $user = UserModel::get($id);\n   $book = $user->books()->getByTitle('Thinkphp');\n   $book->delete();\n}\n```\n\n### 多对多\n```php\npublic function roles(){\n  return $this->belongsToMany('Role','Think_access');\n}\n\npublic function user(){\n  return $this->belongsToMany('User','think_access');\n}\n\n#使用\npublic function add(){\n   $user = UserModel::getByNickname('张三');\n   $user->roles()->save(['name'=>'editor','title'=>'编辑']);\n}\npublic function add(){\n   $user = UserModel::getByNickname('张三');\n   $user->roles->saveAll([\n     ['name'=>'leader','title'=>'领导'],\n     ['name'=>'admin','title'=>'管理员'],\n  ]);\n}\n\npublic function delete(){\n   $usr = UserModel::get(2) ;\n   $role = Role::getByName('admin');\n   $user->roles()->detach($role);\n   //$user->roles()->detach($role,true);\n}\n```\n\n\n## 例子\n```php\nclass Category extends Model\n{\n    public function product(){\n        return $this->hasMany('product','category_id','id');\n    }\n}\nclass Product extends Model\n{\n    public function property(){\n        return $this->hasMany('property','goods_id','id');\n    }\n}\n\n\n#使用\npublic function index()\n{\n    return Category::with('product,product.property')->where('id',1)->find();\n}\nclass Category extends Model\n{\n    public function product(){\n        return $this->hasMany('product','category_id','id');\n    }\n\n    public function list(){\n        //在with中可以传递一个闭包函数，函数的参数为当前key锁对应模型的查询器 $this\n        //在闭包函数中无需使用select或者find等返回数据\n        //如下操作返回 category中所有值，以及对应 product ，并且product按照price排序\n        return self::with([\n            'product'=>function($query){\n                $query->with('property')->field('name')->order('price');\n            }\n        ])->select();\n    }\n}\n```\n\n### 注意\n```php\n//这个可以过滤条件，但是不能处理分页\n$model->with(['adminUsers'=>function($query){\n  $query->where(\"type\",$this->param['type']);\n}]);\n\n//又要有条件又分页, join适用于一对一的关系表合并\n$model->alias('a')\n      ->join('admin_users u','a.admin_id = u.id','LEFT')\n      ->where('u.type',$this->param['type']);\n```\n","tags":["php","thinkphp5"]},{"title":"安装Git服务","url":"/2019/02/13/安装Git服务/","content":"## Gogs 一款极易搭建的自助 Git 服务\n[gogs](https://gogs.io/)\n\n## 安装\nhttps://gogs.io/docs/installation\n\n## 文档\nhttps://gogs.io/docs\n","tags":["go","git"]},{"title":"网易mumu安卓模拟器使用","url":"/2019/01/30/网易mumu安卓模拟器使用/","content":"## mumu模拟器\n电脑端的安卓模拟器\n\n### 下载\nhttp://mumu.163.com/\n\n### 连接到MUMU模拟器\n连接模拟器的话需要用adb\n```\nadb connect 127.0.0.1:7555\n```\n\n### 查看连接设备\n```\nadb devices\n```\n\n### 查看端口占用\n```\nnetstat -ano|findstr \"7555\"\n```\n\n### 关闭\n关闭模拟器后，会直接断开连接（adb connect）\n","tags":["android","adb","mumu"]},{"title":"wamp配置","url":"/2018/12/12/wamp配置/","content":"\n##  安装\n下载wamp包并安装\n\n## 配置\n\n### 配置host C:\\Windows\\System32\\drivers\\etc\n```\n127.0.0.1 www.test.com\n```\n### 找到Apache服务器下的 httpd.conf\n```\n# Virtual hosts\n# Include conf/extra/httpd-vhosts.conf\n```\n去掉注释\n\n### 配置虚拟域名\n```\n<VirtualHost *:80>\n    ServerAdmin webmaster@www.test.com\n    DocumentRoot \"D:\\Bitnami\\wampstack-7.1.24-0\\apache2\\htdocs\\work\\InMiBao\\public\"\n    ServerName www.test.com\n    ErrorLog \"logs/www.test.com-error.log\"\n    CustomLog \"logs/www.test.com-access.log\" common\n</VirtualHost>\n```\n* ServerAdmin 　　  这个是管理员邮箱\n* DocumentRoot 　  这个是域名进入的根目录\n* ServerName 　　　 这个是虚拟主机的域名（名称随便）\n* Errorlog 　　　　　这个是错误日志，后面是日志的存放地址\n* CustomLog　　　　这个是虚拟主机访问的日志。\n\n### thinkphp5去除index.php\n```\n[ Apache ]\nhttpd.conf配置文件中加载了mod_rewrite.so模块\n所有 AllowOverride None 将None改为 All\n把下面的内容保存为.htaccess文件放到应用入口文件的同级目录下\n<IfModule mod_rewrite.c>\n  Options +FollowSymlinks -Multiviews\n  RewriteEngine On\n\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]\n</IfModule>\n```\n重启Apache服务器\n","tags":["php","windows","wamp","mysql","apache"]},{"title":"程序小片段Snippets","url":"/2018/12/12/程序小片段Snippets/","content":"## 简介\nSnippets是可以在Chrome DevTools的“源”面板中创建和执行的小脚本。 您可以从任何页面访问和运行它们。 当您运行代码段时,它会从当前打开的页面的上下文执行。\n\n### 入口\nChrome开发者工具-Sources面板-Snippets面板\n<center>\n<img src=\"/post_img/20181212/20181212-01.png\" width=\"90%\" />\n</center>\n\n### 显示边框\n显示所有元素的边框，看页面布局非常方便\n```js\n[].forEach.call($$(\"*\"),function(a){\n  a.style.outline=\"1px solid #\"+(~~(Math.random()*(1<<24))).toString(16)\n});\n```\n<center>\n<img src=\"/post_img/20181212/20181212-02.png\" width=\"90%\" />\n</center>\n\n### allcolors.js\n从页面上的元素中使用的计算样式打印所有颜色。 使用样式化的console.log调用来可视化每种颜色。\n```js\n// allcolors.js\n// https://github.com/bgrins/devtools-snippets\n// Print out CSS colors used in elements on the page.\n\n(function () {\n  // Should include colors from elements that have a border color but have a zero width?\n  var includeBorderColorsWithZeroWidth = false;\n\n  var allColors = {};\n  var props = [\"background-color\", \"color\", \"border-top-color\", \"border-right-color\", \"border-bottom-color\", \"border-left-color\"];\n  var skipColors = {\n    \"rgb(0, 0, 0)\": 1,\n    \"rgba(0, 0, 0, 0)\": 1,\n    \"rgb(255, 255, 255)\": 1\n  };\n\n  [].forEach.call(document.querySelectorAll(\"*\"), function (node) {\n    var nodeColors = {};\n    props.forEach(function (prop) {\n      var color = window.getComputedStyle(node, null).getPropertyValue(prop),\n      thisIsABorderProperty = (prop.indexOf(\"border\") != -1),\n      notBorderZero = thisIsABorderProperty ? window.getComputedStyle(node, null).getPropertyValue(prop.replace(\"color\", \"width\")) !== \"0px\" : true,\n      colorConditionsMet;\n\n      if (includeBorderColorsWithZeroWidth) {\n        colorConditionsMet = color && !skipColors[color];\n      } else {\n        colorConditionsMet = color && !skipColors[color] && notBorderZero;\n      }\n\n      if (colorConditionsMet) {\n        if (!allColors[color]) {\n          allColors[color] = {\n            count: 0,\n            nodes: []\n          };\n        }\n\n        if (!nodeColors[color]) {\n          allColors[color].count++;\n          allColors[color].nodes.push(node);\n        }\n\n        nodeColors[color] = true;\n      }\n    });\n  });\n\n  function rgbTextToRgbArray(rgbText) {\n    return rgbText.replace(/\\s/g, \"\").match(/\\d+,\\d+,\\d+/)[0].split(\",\").map(function(num) {\n      return parseInt(num, 10);\n    });\n  }\n\n  function componentToHex(c) {\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n  }\n\n  function rgbToHex(rgbArray) {\n    var r = rgbArray[0],\n    g = rgbArray[1],\n    b = rgbArray[2];\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  }\n\n  var allColorsSorted = [];\n  for (var i in allColors) {\n    var rgbArray = rgbTextToRgbArray(i);\n    var hexValue = rgbToHex(rgbArray);\n\n    allColorsSorted.push({\n      key: i,\n      value: allColors[i],\n      hexValue: hexValue\n    });\n  }\n\n  allColorsSorted = allColorsSorted.sort(function (a, b) {\n    return b.value.count - a.value.count;\n  });\n\n  var nameStyle = \"font-weight:normal;\";\n  var countStyle = \"font-weight:bold;\";\n  function colorStyle(color) {\n    return \"background:\" + color + \";color:\" + color + \";border:1px solid #333;\";\n  };\n\n  console.group(\"Total colors used in elements on the page: \" + window.location.href + \" are \" + allColorsSorted.length);\n  allColorsSorted.forEach(function (c) {\n    console.groupCollapsed(\"%c    %c \" + c.key + \" \" + c.hexValue + \" %c(\" + c.value.count + \" times)\",\n    colorStyle(c.key), nameStyle, countStyle);\n    c.value.nodes.forEach(function (node) {\n      console.log(node);\n    });\n    console.groupEnd();\n  });\n  console.groupEnd(\"All colors used in elements on the page\");\n\n})();\n```\n\n### 查看加载的link和script\n```js\n//Cache Buster\n(function (){\n  var rep = /.*\\?.*/,\n  links = document.getElementsByTagName('link'),\n  scripts = document.getElementsByTagName('script');\n  console.log('link----------------');\n  for (var i=0;i<links.length;i++){\n    var link = links[i],\n    href = link.href;\n    if(rep.test(href)){\n      link.href = href+'&'+Date.now();\n    }else{\n      link.href = href+'?'+Date.now();\n    }\n    console.log(link.href);\n  }\n  console.log('script----------------');\n  for (var i=0;i<scripts.length;i++){\n    var script = scripts[i],\n    src = script.src;\n    console.log(src);\n  }\n})();\n```\n\n### console-save.js\n从控制台将对象保存为.json文件的简单方法包括一个chrome扩展和一个纯文本。\n```js\n(function(console){\n\n    console.save = function(data, filename){\n\n        if(!data) {\n            console.error('Console.save: No data')\n            return;\n        }\n\n        if(!filename) filename = 'console.json'\n\n        if(typeof data === \"object\"){\n            data = JSON.stringify(data, undefined, 4)\n        }\n\n        var blob = new Blob([data], {type: 'text/json'}),\n            e    = document.createEvent('MouseEvents'),\n            a    = document.createElement('a')\n\n        a.download = filename\n        a.href = window.URL.createObjectURL(blob)\n        a.dataset.downloadurl =  ['text/json', a.download, a.href].join(':')\n        e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null)\n        a.dispatchEvent(e)\n    }\n})(console)\n\n/* 测试 */\nvar data={name:'test'};\nconsole.save(data, [test.json]);\n```\n\n### formcontrols.js\n在一个不错的表中显示所有html表单元素及其值和类型。 在页面上为每个表单添加一个新表\n```js\n// formcontrols.js\n// https://github.com/bgrins/devtools-snippets\n// Print out forms and their controls\n\n(function() {\n\n  var forms = document.querySelectorAll(\"form\");\n\n  for (var i = 0, len = forms.length; i < len; i++) {\n    var tab = [ ];\n\n    console.group(\"HTMLForm quot;\" + forms[i].name + \"quot;: \" + forms[i].action);\n    console.log(\"Element:\", forms[i], \"\\nName:    \"+forms[i].name+\"\\nMethod:  \"+forms[i].method.toUpperCase()+\"\\nAction:  \"+forms[i].action || \"null\");\n\n    [\"input\", \"textarea\", \"select\"].forEach(function (control) {\n      [].forEach.call(forms[i].querySelectorAll(control), function (node) {\n        tab.push({\n          \"Element\": node,\n          \"Type\": node.type,\n          \"Name\": node.name,\n          \"Value\": node.value,\n          \"Pretty Value\": (isNaN(node.value) || node.value === \"\" ? node.value : parseFloat(node.value))\n        });\n      });\n    });\n\n    console.table(tab);\n    console.groupEnd();\n  }\n})();\n```\n\n### log-globals.js\n打印全局变量\n```js\n/*\n    log-globals\n    by Sindre Sorhus\n    https://github.com/sindresorhus/log-globals\n    MIT License\n*/\n(function () {\n    'use strict';\n\n    function getIframe() {\n        var el = document.createElement('iframe');\n        el.style.display = 'none';\n        document.body.appendChild(el);\n        var win = el.contentWindow;\n        document.body.removeChild(el);\n        return win;\n    }\n\n    function detectGlobals() {\n        var iframe = getIframe();\n        var ret = Object.create(null);\n\n        for (var prop in window) {\n            if (!(prop in iframe)) {\n                ret[prop] = window[prop];\n            }\n        }\n\n        return ret;\n    }\n\n    console.log(detectGlobals());\n})();\n```\n\n### 获取基本的运行时间信息\n```js\nvar timing = performance.timing;\nvar readyStart = timing.fetchStart - timing.navigationStart;\nvar redirectTime = timing.redirectEnd  - timing.redirectStart;\nvar appcacheTime = timing.domainLookupStart  - timing.fetchStart;\nvar unloadEventTime = timing.unloadEventEnd - timing.unloadEventStart;\nvar lookupDomainTime = timing.domainLookupEnd - timing.domainLookupStart;\nvar connectTime = timing.connectEnd - timing.connectStart;\nvar requestTime = timing.responseEnd - timing.requestStart;\nvar initDomTreeTime = timing.domInteractive - timing.responseEnd;\nvar domReadyTime = timing.domComplete - timing.domInteractive; //过早获取时,domComplete有时会是0\nvar loadEventTime = timing.loadEventEnd - timing.loadEventStart;\nvar loadTime = timing.loadEventEnd - timing.navigationStart;//过早获取时,loadEventEnd有时会是0\n\nconsole.log('准备新页面时间耗时: ' + readyStart);\nconsole.log('redirect 重定向耗时: ' + redirectTime);\nconsole.log('Appcache 耗时: ' + appcacheTime);\nconsole.log('unload 前文档耗时: ' + unloadEventTime);\nconsole.log('DNS 查询耗时: ' + lookupDomainTime);\nconsole.log('TCP连接耗时: ' + connectTime);\nconsole.log('request请求耗时: ' + requestTime);\nconsole.log('请求完毕至DOM加载: ' + initDomTreeTime);\nconsole.log('解释dom树耗时: ' + domReadyTime);\nconsole.log('load事件耗时: ' + loadEventTime);\nconsole.log('从开始至load总耗时: ' + loadTime);\n```\n\n### 资料网站\n[https://github.com/bgrins/devtools-snippets](https://github.com/bgrins/devtools-snippets)\n\n[https://github.com/sindresorhus/log-globals](https://github.com/sindresorhus/log-globals)\n","tags":["js","chrome","snippets"]},{"title":"jQuery图像浏览插件","url":"/2018/12/12/jQuery图像浏览插件/","content":"## 简介\nViewer.js 是一款强大的 jQuery 图像浏览插件。\n\nGitHub地址: [https://github.com/fengyuanchen/viewer](https://github.com/fengyuanchen/viewer)\n\n例子: [demo](https://fengyuanchen.github.io/viewerjs/)\n\n## 使用 :\n\n#### 引入css和js\n```\n<script src=\"/path/to/jquery.js\"></script><!-- jQuery is required -->\n<script src=\"/path/to/viewer.js\"></script>\n<link  href=\"/path/to/viewer.css\" rel=\"stylesheet\">\n```\n\n#### html 部分\n```\n<ul id=\"viewer\">\n    <li><img src=\"img/tibet-1.jpg\" data-original=\"img/tibet-1.jpg\" alt=\"图片1\"></li>\n    <li><img src=\"img/tibet-2.jpg\" data-original=\"img/tibet-2.jpg\" alt=\"图片2\"></li>\n    <li><img src=\"img/tibet-3.jpg\" data-original=\"img/tibet-3.jpg\" alt=\"图片3\"></li>\n</ul>\n```\n插件默认会取图片的src地址。如果想要放大之后换一张大图的话，可以把大图的路径写在data-original属性中，然后设置url:\"data-original\" 。\n\nalt用来存放图片的标题。\n\n#### JavaScript 部分\n```\n$('#viewer').viewer();\n或者\n$('#viewer').viewer({url:\"data-original\"});\n```\n\n### 配置\n名称|类型|默认值|说明\n--|:--:|:--:|--:\ninline\t|布尔值\t|false\t|启用 inline 模式\nbutton\t|布尔值\t|true\t|显示右上角关闭按钮（jQuery 版本无效）\nnavbar\t|布尔值/整型\t|true\t|显示缩略图导航\ntitle\t|布尔值/整型\t|true\t|显示当前图片的标题（现实 alt 属性及图片尺寸）\ntoolbar\t|布尔值/整型\t|true\t|显示工具栏\ntooltip\t|布尔值\t|true\t|显示缩放百分比\nmovable\t|布尔值\t|true\t|图片是否可移动\nzoomable\t|布尔值\t|true\t|图片是否可缩放\nrotatable\t|布尔值\t|true\t|图片是否可旋转\nscalable\t|布尔值\t|true\t|图片是否可翻转\ntransition\t|布尔值\t|true\t|使用 CSS3 过度\nfullscreen\t|布尔值\t|true\t|播放时是否全屏\nkeyboard\t|布尔值\t|true\t|是否支持键盘\ninterval\t|整型\t|5000\t|播放间隔，单位为毫秒\nzoomRatio\t|浮点型\t|0.1\t|鼠标滚动时的缩放比例\nminZoomRatio\t|浮点型\t|0.01\t|最小缩放比例\nmaxZoomRatio\t|数字\t|100\t|最大缩放比例\nzIndex\t|数字\t|2015\t|设置图片查看器 modal 模式时的 z-index\nzIndexInline\t|数字\t|0\t|设置图片查看器 inline 模式时的 z-index\nurl\t|字符串/函数\t|src\t|设置大图片的 url\nbuild\t|函数\t|null\t|回调函数，具体查看演示\nbuilt\t|函数\t|null\t|回调函数，具体查看演示\nshow\t|函数\t|null\t|回调函数，具体查看演示\nshown\t|函数\t|null\t|回调函数，具体查看演示\nhide\t|函数\t|null\t|回调函数，具体查看演示\nhidden\t|函数\t|null\t|回调函数，具体查看演示\nview\t|函数\t|null\t|回调函数，具体查看演示\nviewed\t|函数\t|null\t|回调函数，具体查看演示\n\n参数的用法：\n```\n$('#viewer').viewer({url:\"data-original\"});\n```\n","tags":["jquery","js","viewer.js"]},{"title":"window上的todolist工具","url":"/2018/12/11/window上的todolist工具/","content":"\n##  简介\nwindows上的记录工具\n\n### 下载\n[todolist](/zip/todolist_exe.zip)\n\n下载解压后可以直接使用\n","tags":["windows","TodoList"]},{"title":"GitHub页面基础","url":"/2018/12/11/GitHub页面基础/","content":"## GitHub页面基础\nGitHub页面有两种基本类型：项目页面站点，用户和组织页面站点。\n\n### 发布源\n* 该master分支\n* 该gh-pages分支\n* 位于master分支上的名为“docs”的文件夹\n\n<center>\n<img src=\"/mypublic/blog_img/201901/20190128-1.png\" width=\"90%\" />\n</center>\n\n<center>\n<img src=\"/mypublic/blog_img/201901/20190128-2.png\" width=\"90%\" />\n</center>\n\n### 访问\n```\n项目页面站点 http(s)://<username>.github.io/<projectname>\n```\n","tags":["html","github"]},{"title":"创建免费blog","url":"/2018/12/11/创建blog/","content":"## Blog\n通过 [Hexo](https://hexo.io/)主题使用[AirCloud](https://github.com/aircloud/hexo-theme-aircloud) 、[GitHub](https://github.com/)创建[blog](https://zhanghuan2018.github.io/).\n\n### 前提\n安装 Node.js 、Git\n\n### 安装 Hexo\n``` bash\n$ npm install -g hexo-cli\n```\n\n### 建立网站\n``` bash\n$ hexo init blog\n$ cd hexo\n```\n\n### 运行服务\n``` bash\n$ hexo server\n$ ##简写\n$ hexo s\n```\n浏览器访问: [http://localhost:4000](http://localhost:4000)\n\n### 生成静态文件\n``` bash\n$ hexo generate\n$ ##简写\n$ hexo g\n$ hexo g -d #生成静态文件并部署\n```\n\n### github账号\n\n创建github账号，并配置能在本地git push\n\n创建项目 xxx.github.io\n\n### 部署到github\n``` bash\n$ #要安装 hexo-deployer-git\n$ npm install hexo-deployer-git --save\n#  #配置 _config.yml\n#  deploy:\n#    type: git\n#    repository: git@github.com:xxx.github.io.git 或者 https://github.com/xxx.github.io.git\n#    branch: master\n$ hexo deploy\n$ ##简写\n$ hexo d\n$ hexo d -g #生成静态文件并部署\n```\n\n\n### 清除文件\n``` bash\n$ hexo clean\n```\n\n清除缓存文件 (db.json) 和已生成的静态文件 (public)\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n","tags":["github","hexo","blog"]}]